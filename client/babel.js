// Generated by Haxe 3.4.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var sk_thenet_fsm_Memory = function() { };
sk_thenet_fsm_Memory.__name__ = true;
var sk_thenet_fsm_Machine = function() { };
sk_thenet_fsm_Machine.__name__ = true;
var sk_thenet_app_Application = function(inits) {
	this.fps = -1;
	var fpsInit = false;
	this.states = [];
	this.statesMap = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < inits.length) {
		var init = inits[_g];
		++_g;
		switch(init[1]) {
		case 0:
			var assets = init[2];
			if(this.assetManager == null) {
				this.assetManager = new sk_thenet_app_AssetManager(assets);
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 1:
			if(this.console == null) {
				this.console = new sk_thenet_app_Console();
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 2:
			var port = init[3];
			var host = init[2];
			this.console.attachRemote(host,port);
			break;
		case 3:
			var fps = init[2];
			if(!fpsInit) {
				fpsInit = true;
				this.fps = fps;
				sk_thenet_plat_js_canvas_Platform.source.listen("tick",$bind(this,this.handleTick));
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 4:
			if(this.keyboard == null) {
				sk_thenet_plat_js_canvas_Platform.keyboard = new sk_thenet_plat_js_common_app_Keyboard();
				window.document.body.addEventListener("keydown",sk_thenet_plat_js_canvas_Platform.handleKeyDown);
				window.document.body.addEventListener("keyup",sk_thenet_plat_js_canvas_Platform.handleKeyUp);
				this.keyboard = sk_thenet_plat_js_canvas_Platform.keyboard;
				sk_thenet_plat_js_canvas_Platform.source.listen("kdown",$bind(this,this.handleKeyDown));
				sk_thenet_plat_js_canvas_Platform.source.listen("kup",$bind(this,this.handleKeyUp));
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 5:
			if(this.mouse == null) {
				sk_thenet_plat_js_canvas_Platform.mouse = new sk_thenet_plat_js_common_app_Mouse();
				sk_thenet_plat_js_canvas_Platform.canvas.addEventListener("click",sk_thenet_plat_js_canvas_Platform.handleMouseClick);
				sk_thenet_plat_js_canvas_Platform.canvas.addEventListener("mousedown",sk_thenet_plat_js_canvas_Platform.handleMouseDown);
				sk_thenet_plat_js_canvas_Platform.canvas.addEventListener("mouseup",sk_thenet_plat_js_canvas_Platform.handleMouseUp);
				sk_thenet_plat_js_canvas_Platform.canvas.addEventListener("mousemove",sk_thenet_plat_js_canvas_Platform.handleMouseMove);
				this.mouse = sk_thenet_plat_js_canvas_Platform.mouse;
				sk_thenet_plat_js_canvas_Platform.source.listen("mclick",$bind(this,this.handleMouseClick));
				sk_thenet_plat_js_canvas_Platform.source.listen("mdown",$bind(this,this.handleMouseDown));
				sk_thenet_plat_js_canvas_Platform.source.listen("mmove",$bind(this,this.handleMouseMove));
				sk_thenet_plat_js_canvas_Platform.source.listen("mup",$bind(this,this.handleMouseUp));
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 6:
			var scale = init[4];
			var height = init[3];
			var width = init[2];
			if(this.surface == null) {
				sk_thenet_plat_js_canvas_Platform.canvas = window.document.querySelector("#surf");
				sk_thenet_plat_js_canvas_Platform.canvas.width = width;
				sk_thenet_plat_js_canvas_Platform.canvas.height = height;
				var scaledWidth = width << scale;
				var scaledHeight = height << scale;
				sk_thenet_plat_js_canvas_Platform.canvas.style.cssText = ["width:" + scaledWidth + "px;","height:" + scaledHeight + "px;","image-rendering:optimizeSpeed;","image-rendering:-moz-crisp-edges;","image-rendering:-webkit-optimize-contrast;","image-rendering:-o-crisp-edges;","image-rendering:pixelated;","-ms-interpolation-mode:nearest-neighbor;","-webkit-touch-callout:none;","-webkit-user-select:none;","-khtml-user-select:none;","-moz-user-select:none;","-ms-user-select:none;","user-select:none;"].join("");
				sk_thenet_plat_js_canvas_Platform.scale = scale;
				this.surface = new sk_thenet_plat_js_canvas_bmp_Surface(new sk_thenet_plat_js_canvas_bmp_Bitmap(sk_thenet_plat_js_canvas_Platform.canvas));
				this.bitmap = this.surface.bitmap;
			} else {
				throw new js__$Boot_HaxeError("duplicate ApplicationInits");
			}
			break;
		case 7:
			var height1 = init[4];
			var width1 = init[3];
			var title = init[2];
			throw new js__$Boot_HaxeError("unsupported operation");
			break;
		default:
			throw new js__$Boot_HaxeError("duplicate ApplicationInits");
		}
	}
	if(this.console != null) {
		if(this.assetManager != null) {
			this.console.set_assetManager(this.assetManager);
			this.assetManager.attachConsole(this.console);
		}
		this.console.set_keyboard(this.keyboard);
		this.console.set_surface(this.surface);
		this.console.applicationInits = inits;
	}
};
sk_thenet_app_Application.__name__ = true;
sk_thenet_app_Application.__interfaces__ = [sk_thenet_fsm_Memory,sk_thenet_fsm_Machine];
sk_thenet_app_Application.prototype = {
	handleTick: function(event) {
		if(this.assetManager != null && this.preloader != null && this.currentState == this.preloader) {
			this.preloader.progress(this.assetManager.assets);
		}
		if(this.console != null) {
			if(this.console.applicationTick) {
				this.currentState.tick();
			}
			this.console.tick();
		} else {
			this.currentState.tick();
		}
		return true;
	}
	,handleKeyDown: function(event) {
		this.currentState.keyDown(event.key);
		return true;
	}
	,handleKeyUp: function(event) {
		this.currentState.keyUp(event.key);
		return true;
	}
	,handleMouseClick: function(event) {
		this.currentState.mouseClick(event.x,event.y);
		return true;
	}
	,handleMouseDown: function(event) {
		this.currentState.mouseDown(event.x,event.y);
		return true;
	}
	,handleMouseMove: function(event) {
		this.currentState.mouseMove(event.x,event.y);
		return true;
	}
	,handleMouseUp: function(event) {
		this.currentState.mouseUp(event.x,event.y);
		return true;
	}
	,addState: function(state) {
		if(this.states.length == 0) {
			this.initialState = state;
		} else {
			var key = state.id;
			var _this = this.statesMap;
			if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
				throw new js__$Boot_HaxeError("duplicate state");
			}
		}
		this.states.push(state);
		var key1 = state.id;
		var _this1 = this.statesMap;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,state);
		} else {
			_this1.h[key1] = state;
		}
	}
	,applyState: function(state) {
		this.currentState.from();
		this.currentState = state;
		this.currentState.to();
	}
	,reset: function() {
		this.currentState = this.initialState;
	}
	,getMemory: function() {
		return this;
	}
	,getState: function() {
		return this.currentState;
	}
	,getStateById: function(id) {
		var _this = this.statesMap;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,mainLoop: function() {
		if(this.states.length < 1) {
			throw new js__$Boot_HaxeError("no states specified");
		}
		if(this.assetManager != null && this.preloader != null) {
			this.currentState = this.preloader;
		} else {
			this.currentState = this.initialState;
		}
		this.currentState.to();
		if(this.fps > 0) {
			var fps = this.fps;
			window.requestAnimationFrame(sk_thenet_plat_js_canvas_Platform.handleFrame);
		}
	}
	,__class__: sk_thenet_app_Application
};
var Main = function() {
	sk_thenet_app_Application.call(this,[sk_thenet_app_ApplicationInit.Assets([sk_thenet_plat_js_canvas_app_Embed.getBitmap("game","png/game.png"),new sk_thenet_app_asset_Trigger("pal",["game"],Palette.init),new sk_thenet_app_asset_Bind(["game","pal"],Sprites.init)]),sk_thenet_app_ApplicationInit.Framerate(60),sk_thenet_app_ApplicationInit.Surface(400,225,1),sk_thenet_app_ApplicationInit.Keyboard,sk_thenet_app_ApplicationInit.Mouse]);
	this.preloader = new sk_thenet_app_TNPreloader(this,"game",true);
	this.addState(new SGame(this));
	this.mainLoop();
};
Main.__name__ = true;
Main.main = function() {
	window.onload = function() {
		new Main();
	};
};
Main.__super__ = sk_thenet_app_Application;
Main.prototype = $extend(sk_thenet_app_Application.prototype,{
	__class__: Main
});
Math.__name__ = true;
var Palette = function() { };
Palette.__name__ = true;
Palette.init = function(am,_) {
	var raw = am.getBitmap("game");
	var _g = [];
	var _g1 = 0;
	while(_g1 < 8) {
		var i = _g1++;
		var x = i * 8;
		if(raw.changed) {
			var data8 = raw.c2d.getImageData(0,0,raw.width,raw.height).data;
			var j = 0;
			var _g11 = 0;
			var _g2 = raw.size32;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				raw.data[i1] = this1;
				j += 4;
			}
			raw.changed = false;
		}
		_g.push(!(x >= 0 && x <= raw.width - 1) || 0 > raw.height - 1 ? 0 : raw.data[x + 0 * raw.width]);
	}
	Palette.pal = _g.slice(0);
	var _g12 = [];
	var _g21 = 1;
	while(_g21 < 5) {
		var a = _g21++;
		var _g4 = 0;
		var _g3 = 50;
		while(_g4 < _g3) {
			var i2 = _g4++;
			var colour = Palette.pal[Math.floor(i2 / 7)];
			var canvas = window.document.createElement("canvas");
			canvas.width = 4;
			canvas.height = 4;
			var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
			var width = bmp.width;
			var height = bmp.height;
			if(colour >>> 24 != 255) {
				bmp.c2d.clearRect(0,0,width,height);
			}
			bmp.c2d.fillStyle = "rgba(" + (colour >>> 16 & 255) + ", " + (colour >>> 8 & 255) + ", " + (colour & 255) + ", " + (colour >>> 24) / 255 + ")";
			bmp.c2d.fillRect(0,0,width,height);
			bmp.changed = true;
			var p = bmp;
			var di = 0;
			var _g5 = 0;
			while(_g5 < 4) {
				var y = _g5++;
				var _g6 = 0;
				while(_g6 < 4) {
					var x1 = _g6++;
					if(i2 % 7 != 0 && sk_thenet_bmp_OrderedDither.BAYER_4[di++] < i2 % 7 * 2) {
						var colour1 = Palette.pal[Math.floor(i2 / 7) + 1];
						if(colour1 >>> 24 != 255) {
							p.c2d.clearRect(x1,y,1,1);
						}
						p.c2d.fillStyle = "rgba(" + (colour1 >>> 16 & 255) + ", " + (colour1 >>> 8 & 255) + ", " + (colour1 & 255) + ", " + (colour1 >>> 24) / 255 + ")";
						p.c2d.fillRect(x1,y,1,1);
						p.changed = true;
						p.changed = true;
					}
					if((x1 + y) % a != 0) {
						if(0 >>> 24 != 255) {
							p.c2d.clearRect(x1,y,1,1);
						}
						p.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
						p.c2d.fillRect(x1,y,1,1);
						p.changed = true;
						p.changed = true;
					}
				}
			}
			_g12.push(p.c2d.createPattern(p["native"],"repeat"));
		}
	}
	Palette.patterns = _g12.slice(0);
	var _g22 = [];
	var _g31 = 0;
	while(_g31 < 16) {
		var i3 = _g31++;
		var x2 = i3 % 8 * 8;
		var y1 = (i3 >> 3) * 8 + 8;
		if(raw.changed) {
			var data81 = raw.c2d.getImageData(0,0,raw.width,raw.height).data;
			var j1 = 0;
			var _g13 = 0;
			var _g7 = raw.size32;
			while(_g13 < _g7) {
				var i4 = _g13++;
				var this2 = data81[j1 + 3] << 24 | data81[j1] << 16 | data81[j1 + 1] << 8 | data81[j1 + 2];
				raw.data[i4] = this2;
				j1 += 4;
			}
			raw.changed = false;
		}
		_g22.push(!(x2 >= 0 && x2 <= raw.width - 1) || !(y1 >= 0 && y1 <= raw.height - 1) ? 0 : raw.data[x2 + y1 * raw.width]);
	}
	Palette.factions = _g22.slice(0);
	var _g32 = [];
	var _g41 = 0;
	while(_g41 < 8) {
		var f = _g41++;
		var _g51 = [];
		var _g71 = 0;
		var _g61 = 15;
		while(_g71 < _g61) {
			var i5 = _g71++;
			var base;
			var _g8 = Math.floor(i5 / 7);
			switch(_g8) {
			case 0:
				base = Palette.pal[4];
				break;
			case 1:
				base = Palette.factions[f];
				break;
			default:
				base = Palette.factions[f + 8];
			}
			var next;
			var _g9 = Math.floor(i5 / 7);
			if(_g9 == 0) {
				next = Palette.factions[f];
			} else {
				next = Palette.factions[f + 8];
			}
			var canvas1 = window.document.createElement("canvas");
			canvas1.width = 4;
			canvas1.height = 4;
			var bmp1 = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas1);
			var width1 = bmp1.width;
			var height1 = bmp1.height;
			if(base >>> 24 != 255) {
				bmp1.c2d.clearRect(0,0,width1,height1);
			}
			bmp1.c2d.fillStyle = "rgba(" + (base >>> 16 & 255) + ", " + (base >>> 8 & 255) + ", " + (base & 255) + ", " + (base >>> 24) / 255 + ")";
			bmp1.c2d.fillRect(0,0,width1,height1);
			bmp1.changed = true;
			var p1 = bmp1;
			var di1 = 0;
			var _g10 = 0;
			while(_g10 < 4) {
				var y2 = _g10++;
				var _g111 = 0;
				while(_g111 < 4) {
					var x3 = _g111++;
					if(i5 % 7 != 0 && sk_thenet_bmp_OrderedDither.BAYER_4[di1++] < i5 % 7 * 2) {
						if(next >>> 24 != 255) {
							p1.c2d.clearRect(x3,y2,1,1);
						}
						p1.c2d.fillStyle = "rgba(" + (next >>> 16 & 255) + ", " + (next >>> 8 & 255) + ", " + (next & 255) + ", " + (next >>> 24) / 255 + ")";
						p1.c2d.fillRect(x3,y2,1,1);
						p1.changed = true;
						p1.changed = true;
					}
				}
			}
			p1.debug();
			_g51.push(p1.c2d.createPattern(p1["native"],"repeat"));
		}
		_g32.push(_g51.slice(0));
	}
	Palette.facPatterns = _g32.slice(0);
	return false;
};
var sk_thenet_fsm_State = function() { };
sk_thenet_fsm_State.__name__ = true;
var sk_thenet_app_State = function(id,app) {
	this.id = id;
	this.app = app;
};
sk_thenet_app_State.__name__ = true;
sk_thenet_app_State.__interfaces__ = [sk_thenet_fsm_State];
sk_thenet_app_State.prototype = {
	to: function() {
	}
	,from: function() {
	}
	,tick: function() {
	}
	,mouseClick: function(x,y) {
	}
	,mouseDown: function(x,y) {
	}
	,mouseUp: function(x,y) {
	}
	,mouseMove: function(x,y) {
	}
	,keyDown: function(key) {
	}
	,keyUp: function(key) {
	}
	,__class__: sk_thenet_app_State
};
var SGame = function(app) {
	sk_thenet_app_State.call(this,"game",app);
};
SGame.__name__ = true;
SGame.__super__ = sk_thenet_app_State;
SGame.prototype = $extend(sk_thenet_app_State.prototype,{
	to: function() {
		this.ico = common_Geodesic.generateIcosahedron(4);
		this.zoomIntro = 0;
		this.camera = sk_thenet_geom_Quaternion.identity;
	}
	,tick: function() {
		var _this = this.app.bitmap;
		var colour = Palette.pal[3];
		var width = _this.width;
		var height = _this.height;
		if(colour >>> 24 != 255) {
			_this.c2d.clearRect(0,0,width,height);
		}
		_this.c2d.fillStyle = "rgba(" + (colour >>> 16 & 255) + ", " + (colour >>> 8 & 255) + ", " + (colour & 255) + ", " + (colour >>> 24) / 255 + ")";
		_this.c2d.fillRect(0,0,width,height);
		_this.changed = true;
		this.ico.scale(sk_thenet_anim__$Timing_Timing_$Impl_$.quadInOut(this.zoomIntro) * 190);
		if(this.zoomIntro < 1) {
			this.zoomIntro += .01;
		}
		this.ico.render(this.app.bitmap);
		var cursor = 0;
		var moveintensity = 0;
		var movecursors = [new sk_thenet_geom_Point2DI(60,182),new sk_thenet_geom_Point2DI(340,182),new sk_thenet_geom_Point2DI(60,82),new sk_thenet_geom_Point2DI(340,82)];
		var _g1 = 0;
		var _g = movecursors.length;
		while(_g1 < _g) {
			var ri = _g1++;
			var i = movecursors.length - ri - 1;
			var _this_y;
			var _this_x;
			var _this_y1;
			var _this_x1;
			var _this_y2;
			var _this_x2 = sk_thenet_plat_js_canvas_Platform.mouse.x;
			_this_y2 = sk_thenet_plat_js_canvas_Platform.mouse.y;
			var other = movecursors[i];
			_this_x1 = _this_x2 - other.x;
			_this_y1 = _this_y2 - other.y;
			_this_x = _this_x1 < 0 ? -_this_x1 : _this_x1;
			_this_y = _this_y1 < 0 ? -_this_y1 : _this_y1;
			var dist = _this_x + _this_y;
			if(dist < 70) {
				cursor = i + 1;
				moveintensity = 1 - dist / 70;
			}
		}
		var _this1 = this.app.bitmap;
		var src = this.app.assetManager.getBitmap("game");
		_this1.c2d.drawImage(src["native"],32 + cursor * 8,24,8,8,sk_thenet_plat_js_canvas_Platform.mouse.x,sk_thenet_plat_js_canvas_Platform.mouse.y,8,8);
		_this1.changed = true;
		var i1 = cursor;
		if(i1 >= 1 && i1 <= 4 && sk_thenet_plat_js_canvas_Platform.mouse.held) {
			var _this_d;
			var _this_c;
			var _this_b;
			var _this_a;
			var _this2 = i1 >= 2 && i1 <= 3 ? new sk_thenet_geom_Point3DF(-1,1,0) : new sk_thenet_geom_Point3DF(1,1,0);
			var factor = 1 / Math.sqrt(_this2.x * _this2.x + _this2.y * _this2.y + _this2.z * _this2.z);
			var _this3 = sk_thenet_geom_Quaternion.axisRotation(new sk_thenet_geom_Point3DF(_this2.x * factor,_this2.y * factor,_this2.z * factor),(i1 % 2 == 0 ? -.06 : .06) * moveintensity);
			var other1 = this.camera;
			_this_a = _this3.a * other1.a - _this3.b * other1.b - _this3.c * other1.c - _this3.d * other1.d;
			_this_b = _this3.a * other1.b + _this3.b * other1.a + _this3.c * other1.d - _this3.d * other1.c;
			_this_c = _this3.a * other1.c - _this3.b * other1.d + _this3.c * other1.a + _this3.d * other1.b;
			_this_d = _this3.a * other1.d + _this3.b * other1.c - _this3.c * other1.b + _this3.d * other1.a;
			var other_d;
			var other_c;
			var other_b;
			var other_a = 1 / Math.sqrt(_this_a * _this_a + _this_b * _this_b + _this_c * _this_c + _this_d * _this_d);
			other_b = 0;
			other_c = 0;
			other_d = 0;
			this.camera = new sk_thenet_geom_Quaternion(_this_a * other_a - _this_b * other_b - _this_c * other_c - _this_d * other_d,_this_a * other_b + _this_b * other_a + _this_c * other_d - _this_d * other_c,_this_a * other_c - _this_b * other_d + _this_c * other_a + _this_d * other_b,_this_a * other_d + _this_b * other_c - _this_c * other_b + _this_d * other_a);
			this.ico.rotate(this.camera);
		} else {
			var tmp = cursor == 0;
		}
	}
	,__class__: SGame
});
var Sprites = function() { };
Sprites.__name__ = true;
Sprites.init = function(am,_) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < 8) {
		var i = _g1++;
		var this1 = am.getBitmap("game");
		var this2 = new sk_thenet_bmp_manip_Cut(i * 24,56,24,24).extract(this1);
		var orig = this2;
		var this3;
		var this4 = new Array(192);
		var vec = this4;
		var _g2 = 0;
		while(_g2 < 8) {
			var a = _g2++;
			var width = orig.width << 1;
			var height = orig.height << 1;
			var canvas = window.document.createElement("canvas");
			canvas.width = width;
			canvas.height = height;
			var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
			var width1 = bmp.width;
			var height1 = bmp.height;
			if(0 >>> 24 != 255) {
				bmp.c2d.clearRect(0,0,width1,height1);
			}
			bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
			bmp.c2d.fillRect(0,0,width1,height1);
			bmp.changed = true;
			var amask = bmp;
			var vi = 0;
			if(amask.changed) {
				var data8 = amask.c2d.getImageData(0,0,amask.width,amask.height).data;
				var j = 0;
				var _g11 = 0;
				var _g3 = amask.size32;
				while(_g11 < _g3) {
					var i1 = _g11++;
					var this5 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
					amask.data[i1] = this5;
					j += 4;
				}
				amask.changed = false;
			}
			var avec = amask.data;
			var _g21 = 0;
			var _g12 = amask.height;
			while(_g21 < _g12) {
				var y = _g21++;
				var _g4 = 0;
				var _g31 = amask.width;
				while(_g4 < _g31) {
					var x = _g4++;
					avec[vi] = sk_thenet_bmp_OrderedDither.BAYER_4[x % 4 + (y % 4 << 2)] < a * 2 ? 0 : -16777216;
					++vi;
				}
			}
			amask.data = avec;
			var data81 = new Uint8ClampedArray(amask.size8);
			var j1 = 0;
			var _g13 = 0;
			var _g5 = amask.size32;
			while(_g13 < _g5) {
				var i2 = _g13++;
				data81[j1] = amask.data[i2] >>> 16 & 255;
				data81[j1 + 1] = amask.data[i2] >>> 8 & 255;
				data81[j1 + 2] = amask.data[i2] & 255;
				data81[j1 + 3] = amask.data[i2] >>> 24;
				j1 += 4;
			}
			var idata = new ImageData(amask.width,amask.height);
			idata.data.set(data81);
			amask.c2d.putImageData(idata,0,0,0,0,amask.width,amask.height);
			amask.changed = false;
			var _g22 = 0;
			var _g14 = 24;
			while(_g22 < _g14) {
				var i3 = _g22++;
				var this6 = orig;
				var this7 = new sk_thenet_bmp_manip_Rotate(i3 / 24 * Math.PI * 2).extract(this6);
				var this8 = this7;
				new sk_thenet_bmp_manip_AlphaMask(amask,true).manipulate(this8);
				var this9 = this8;
				vec[a * 24 + i3] = this9;
			}
		}
		this3 = vec;
		_g.push(this3);
	}
	Sprites.factionSigns = _g.slice(0);
	return false;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var sk_thenet_geom_Point3DF = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
sk_thenet_geom_Point3DF.__name__ = true;
sk_thenet_geom_Point3DF.prototype = {
	__class__: sk_thenet_geom_Point3DF
};
var common_GeoPoint = function(x,y,z) {
	sk_thenet_geom_Point3DF.call(this,x,y,z);
	var magn = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	x /= magn;
	y /= magn;
	z /= magn;
	this.tiles = [];
	this.visible = true;
};
common_GeoPoint.__name__ = true;
common_GeoPoint.ofPoint = function(p) {
	return new common_GeoPoint(p.x,p.y,p.z);
};
common_GeoPoint.__super__ = sk_thenet_geom_Point3DF;
common_GeoPoint.prototype = $extend(sk_thenet_geom_Point3DF.prototype,{
	__class__: common_GeoPoint
});
var common_Geodesic = function(points,tiles) {
	this.ph = 0;
	this.lastScale = 1;
	this.stVisible = 0;
	this.ptVisible = 0;
	this.points = points.slice(0);
	this.tiles = tiles.slice(0);
	var this1 = new Array(12);
	this.pents = this1;
	var pi = 0;
	var _g = 0;
	while(_g < points.length) {
		var p = points[_g];
		++_g;
		if(p.tiles.length == 5) {
			this.pents[pi] = p;
			var _g1 = 0;
			var _g2 = p.tiles;
			while(_g1 < _g2.length) {
				var t = _g2[_g1];
				++_g1;
				t.pent = true;
			}
		}
	}
	var _g3 = 0;
	while(_g3 < tiles.length) {
		var t1 = tiles[_g3];
		++_g3;
		t1.colour = -15724528 | sk_thenet_FM.prng.streamFunc();
	}
	var _g4 = 0;
	while(_g4 < 20) {
		var i = _g4++;
		var _g11 = 0;
		while(_g11 < 8) {
			var f = _g11++;
			if(i == 5) {
				tiles[i + f * 20].sprite = f;
			}
			tiles[i + f * 20].occupied = f;
		}
	}
	var length = points.length;
	var this2 = new Array(length);
	this.rpoints = this2;
	var length1 = points.length;
	var this3 = new Array(length1);
	this.ppoints = this3;
	var length2 = points.length;
	var this4 = new Array(length2);
	this.upoints = this4;
	var length3 = tiles.length;
	var this5 = new Array(length3);
	this.ptiles = this5;
	var length4 = tiles.length;
	var this6 = new Array(length4);
	this.stiles = this6;
	var length5 = points.length;
	var this7 = new Array(length5);
	this.height = this7;
	var _g12 = 0;
	var _g5 = this.height.length;
	while(_g12 < _g5) {
		var i1 = _g12++;
		var this8 = this.height;
		var $int = sk_thenet_FM.prng.streamFunc();
		var int1 = 2147483647;
		this8[i1] = ($int < 0 ? 4294967296.0 + $int : $int + 0.0) / (int1 < 0 ? 4294967296.0 + int1 : int1 + 0.0) * .2 * .5;
	}
	this.select = tiles[35];
	var length6 = Palette.facPatterns.length;
	var this9 = new Array(length6);
	this.facLight = this9;
	var _g6 = [];
	var _g13 = 0;
	while(_g13 < 8) {
		var i2 = _g13++;
		var _g21 = 0;
		while(_g21 < 120) {
			var j = _g21++;
			_g6.push(Math.floor(4 * Math.sin((j + i2 * 45) / 120 * Math.PI * 2)));
		}
	}
	this.facLightPattern = _g6.slice(0);
	var _g14 = [];
	var _g22 = 0;
	while(_g22 < 120) {
		var i3 = _g22++;
		_g14.push(Math.cos(i3 / 120 * Math.PI * 2));
	}
	this.spriteOffsetPattern = _g14.slice(0);
	this.rotate(sk_thenet_geom_Quaternion.identity);
};
common_Geodesic.__name__ = true;
common_Geodesic.generateIcosahedron = function(n) {
	var phi = 1.618;
	var points = [[phi,1,0],[1,0,phi],[0,phi,1],[-phi,1,0],[1,0,-phi],[0,-phi,1],[phi,-1,0],[-1,0,phi],[0,phi,-1],[-phi,-1,0],[-1,0,-phi],[0,-phi,-1]].map(function(a) {
		var _this_z;
		var _this_y;
		var _this_x = a[0];
		_this_y = a[1];
		_this_z = a[2];
		var factor = 1 / Math.sqrt(_this_x * _this_x + _this_y * _this_y + _this_z * _this_z);
		return new sk_thenet_geom_Point3DF(_this_x * factor,_this_y * factor,_this_z * factor);
	});
	var lines = [];
	var _g1 = 0;
	var _g = points.length;
	while(_g1 < _g) {
		var pi = _g1++;
		var _g3 = pi + 1;
		var _g2 = points.length;
		while(_g3 < _g2) {
			var pj = _g3++;
			var _this_z1;
			var _this_y1;
			var _this_x1;
			var _this = points[pi];
			var other = points[pj];
			_this_x1 = _this.x - other.x;
			_this_y1 = _this.y - other.y;
			_this_z1 = _this.z - other.z;
			var d = Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1);
			if(d < phi) {
				lines.push({ f : pi, t : pj});
			}
		}
	}
	var tilesP = [];
	var _g4 = 0;
	while(_g4 < lines.length) {
		var l = lines[_g4];
		++_g4;
		var p = l.f;
		var ret = [];
		var _g5 = 0;
		while(_g5 < lines.length) {
			var l1 = lines[_g5];
			++_g5;
			if(l1.f == p) {
				ret.push(l1.t);
			} else if(l1.t == p) {
				ret.push(l1.f);
			}
		}
		var adj1 = ret;
		var p1 = l.t;
		var ret1 = [];
		var _g6 = 0;
		while(_g6 < lines.length) {
			var l2 = lines[_g6];
			++_g6;
			if(l2.f == p1) {
				ret1.push(l2.t);
			} else if(l2.t == p1) {
				ret1.push(l2.f);
			}
		}
		var adj2 = ret1;
		var ret2 = [];
		var _g7 = 0;
		while(_g7 < adj1.length) {
			var p2 = adj1[_g7];
			++_g7;
			if(adj2.indexOf(p2) != -1) {
				ret2.push(p2);
			}
		}
		var tn = ret2;
		var a1 = [l.f,l.t,tn[0]];
		a1.sort(function(a2,b) {
			return a2 - b;
		});
		var f = false;
		var _g8 = 0;
		while(_g8 < tilesP.length) {
			var t = tilesP[_g8];
			++_g8;
			if(t[0] == a1[0] && t[1] == a1[1] && t[2] == a1[2]) {
				f = true;
			}
		}
		if(!f) {
			tilesP.push(a1);
		}
		var a3 = [l.f,l.t,tn[1]];
		a3.sort(function(a4,b1) {
			return a4 - b1;
		});
		var f1 = false;
		var _g9 = 0;
		while(_g9 < tilesP.length) {
			var t1 = tilesP[_g9];
			++_g9;
			if(t1[0] == a3[0] && t1[1] == a3[1] && t1[2] == a3[2]) {
				f1 = true;
			}
		}
		if(!f1) {
			tilesP.push(a3);
		}
	}
	var _g10 = [];
	var _g11 = 0;
	while(_g11 < tilesP.length) {
		var t2 = tilesP[_g11];
		++_g11;
		_g10.push(new common_Tile(t2));
	}
	var tiles = _g10;
	var _g21 = 0;
	var _g12 = tilesP.length;
	while(_g21 < _g12) {
		var ti = _g21++;
		var _g41 = 0;
		var _g31 = tilesP.length;
		while(_g41 < _g31) {
			var oi = _g41++;
			if(ti == oi) {
				continue;
			}
			var a5 = tilesP[ti];
			var b2 = tilesP[oi];
			var ret3 = [];
			var _g13 = 0;
			while(_g13 < a5.length) {
				var p3 = a5[_g13];
				++_g13;
				if(b2.indexOf(p3) != -1) {
					ret3.push(p3);
				}
			}
			if(ret3.length == 2) {
				tiles[ti].adjacent.push(tiles[oi]);
			}
		}
	}
	var subpoints = [];
	var subtiles = [];
	var _g14 = 0;
	while(_g14 < tiles.length) {
		var t3 = tiles[_g14];
		++_g14;
		var po = points[t3.points[0]];
		var px_z;
		var px_y;
		var px_x;
		var _this_z2;
		var _this_y2;
		var _this_x2;
		var _this1 = points[t3.points[1]];
		_this_x2 = _this1.x - po.x;
		_this_y2 = _this1.y - po.y;
		_this_z2 = _this1.z - po.z;
		var factor1 = 1 / n;
		px_x = _this_x2 * factor1;
		px_y = _this_y2 * factor1;
		px_z = _this_z2 * factor1;
		var py_z;
		var py_y;
		var py_x;
		var _this_z3;
		var _this_y3;
		var _this_x3;
		var _this2 = points[t3.points[2]];
		_this_x3 = _this2.x - po.x;
		_this_y3 = _this2.y - po.y;
		_this_z3 = _this2.z - po.z;
		var factor2 = 1 / n;
		py_x = _this_x3 * factor2;
		py_y = _this_y3 * factor2;
		py_z = _this_z3 * factor2;
		var ppoints = [];
		var _g32 = 0;
		var _g22 = n + 1;
		while(_g32 < _g22) {
			var y = _g32++;
			var _g51 = 0;
			var _g42 = n + 1;
			while(_g51 < _g42) {
				var x = _g51++;
				if(x + y > n) {
					ppoints.push(-1);
				} else {
					var _this_z4;
					var _this_y4;
					var _this_x4;
					var _this_z5;
					var _this_y5;
					var _this_x5;
					var other_z;
					var other_y;
					var other_x = px_x * x;
					other_y = px_y * x;
					other_z = px_z * x;
					_this_x5 = po.x + other_x;
					_this_y5 = po.y + other_y;
					_this_z5 = po.z + other_z;
					var other_z1;
					var other_y1;
					var other_x1 = py_x * y;
					other_y1 = py_y * y;
					other_z1 = py_z * y;
					_this_x4 = _this_x5 + other_x1;
					_this_y4 = _this_y5 + other_y1;
					_this_z4 = _this_z5 + other_z1;
					var factor3 = 1 / Math.sqrt(_this_x4 * _this_x4 + _this_y4 * _this_y4 + _this_z4 * _this_z4);
					var point = new sk_thenet_geom_Point3DF(_this_x4 * factor3,_this_y4 * factor3,_this_z4 * factor3);
					var ret4 = -1;
					var _g23 = 0;
					var _g15 = subpoints.length;
					while(_g23 < _g15) {
						var pi1 = _g23++;
						var _this3 = subpoints[pi1];
						var _this_z6;
						var _this_y6;
						var _this_x6 = _this3.x - point.x;
						_this_y6 = _this3.y - point.y;
						_this_z6 = _this3.z - point.z;
						if(Math.sqrt(_this_x6 * _this_x6 + _this_y6 * _this_y6 + _this_z6 * _this_z6) < .05) {
							ret4 = pi1;
							break;
						}
					}
					if(ret4 == -1) {
						ret4 = subpoints.length;
						subpoints.push(common_GeoPoint.ofPoint(point));
					}
					ppoints.push(ret4);
				}
				if(x == 0 || y == 0 || x + y > n + 1) {
					continue;
				}
				var points_0 = ppoints[x - 1 + (y - 1) * (n + 1)];
				var points_1 = ppoints[x + (y - 1) * (n + 1)];
				var points_2 = ppoints[x - 1 + y * (n + 1)];
				var tile;
				var p11 = subpoints[points_0];
				var p21 = subpoints[points_1];
				var p31 = subpoints[points_2];
				var px_z1;
				var px_y1;
				var px_x1 = p21.x - p11.x;
				px_y1 = p21.y - p11.y;
				px_z1 = p21.z - p11.z;
				var py_z1;
				var py_y1;
				var py_x1 = p31.x - p11.x;
				py_y1 = p31.y - p11.y;
				py_z1 = p31.z - p11.z;
				var cp_z;
				var cp_y;
				var cp_x = px_y1 * py_z1 - px_z1 * py_y1;
				cp_y = px_z1 * py_x1 - px_x1 * py_z1;
				cp_z = px_x1 * py_y1 - px_y1 * py_x1;
				if(p11.x * cp_x + p11.y * cp_y + p11.z * cp_z > 0) {
					tile = new common_Tile([points_0,points_1,points_2]);
				} else {
					tile = new common_Tile([points_0,points_2,points_1]);
				}
				var _g16 = 0;
				var _g24 = tile.points;
				while(_g16 < _g24.length) {
					var p4 = _g24[_g16];
					++_g16;
					subpoints[p4].tiles.push(tile);
				}
				subtiles.push(tile);
				if(x + y > n) {
					continue;
				}
				var points_01 = ppoints[x + (y - 1) * (n + 1)];
				var points_11 = ppoints[x + y * (n + 1)];
				var points_21 = ppoints[x - 1 + y * (n + 1)];
				var tile1;
				var p12 = subpoints[points_01];
				var p22 = subpoints[points_11];
				var p32 = subpoints[points_21];
				var px_z2;
				var px_y2;
				var px_x2 = p22.x - p12.x;
				px_y2 = p22.y - p12.y;
				px_z2 = p22.z - p12.z;
				var py_z2;
				var py_y2;
				var py_x2 = p32.x - p12.x;
				py_y2 = p32.y - p12.y;
				py_z2 = p32.z - p12.z;
				var cp_z1;
				var cp_y1;
				var cp_x1 = px_y2 * py_z2 - px_z2 * py_y2;
				cp_y1 = px_z2 * py_x2 - px_x2 * py_z2;
				cp_z1 = px_x2 * py_y2 - px_y2 * py_x2;
				if(p12.x * cp_x1 + p12.y * cp_y1 + p12.z * cp_z1 > 0) {
					tile1 = new common_Tile([points_01,points_11,points_21]);
				} else {
					tile1 = new common_Tile([points_01,points_21,points_11]);
				}
				var _g17 = 0;
				var _g25 = tile1.points;
				while(_g17 < _g25.length) {
					var p5 = _g25[_g17];
					++_g17;
					subpoints[p5].tiles.push(tile1);
				}
				subtiles.push(tile1);
			}
		}
	}
	var _g18 = 0;
	while(_g18 < subpoints.length) {
		var p6 = subpoints[_g18];
		++_g18;
		var _g33 = 0;
		var _g26 = p6.tiles.length;
		while(_g33 < _g26) {
			var ti1 = _g33++;
			var _g52 = ti1 + 1;
			var _g43 = p6.tiles.length;
			while(_g52 < _g43) {
				var oi1 = _g52++;
				var a6 = p6.tiles[ti1].points;
				var b3 = p6.tiles[oi1].points;
				var ret5 = [];
				var _g19 = 0;
				while(_g19 < a6.length) {
					var p7 = a6[_g19];
					++_g19;
					if(b3.indexOf(p7) != -1) {
						ret5.push(p7);
					}
				}
				if(ret5.length == 2) {
					if(p6.tiles[ti1].adjacent.indexOf(p6.tiles[oi1]) == -1) {
						p6.tiles[ti1].adjacent.push(p6.tiles[oi1]);
					}
					if(p6.tiles[oi1].adjacent.indexOf(p6.tiles[ti1]) == -1) {
						p6.tiles[oi1].adjacent.push(p6.tiles[ti1]);
					}
				}
			}
		}
	}
	return new common_Geodesic(subpoints,subtiles);
};
common_Geodesic.prototype = {
	rotate: function(q,doScale) {
		if(doScale == null) {
			doScale = true;
		}
		var rpVisible = 0;
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var _this_z;
			var _this_y;
			var _this_x;
			var _this_d;
			var _this_c;
			var _this_b;
			var _this_a;
			var _this_d1;
			var _this_c1;
			var _this_b1;
			var _this_a1;
			var other_d;
			var other_c;
			var other_b;
			var other_a = 0;
			other_b = p.x;
			other_c = p.y;
			other_d = p.z;
			_this_a1 = q.a * other_a - q.b * other_b - q.c * other_c - q.d * other_d;
			_this_b1 = q.a * other_b + q.b * other_a + q.c * other_d - q.d * other_c;
			_this_c1 = q.a * other_c - q.b * other_d + q.c * other_a + q.d * other_b;
			_this_d1 = q.a * other_d + q.b * other_c - q.c * other_b + q.d * other_a;
			var other_d1;
			var other_c1;
			var other_b1;
			var other_a1;
			var _this_d2;
			var _this_c2;
			var _this_b2;
			var _this_a2 = q.a;
			_this_b2 = -q.b;
			_this_c2 = -q.c;
			_this_d2 = -q.d;
			var other_d2;
			var other_c2;
			var other_b2;
			var other_a2 = 1 / (Math.sqrt(q.a * q.a + q.b * q.b + q.c * q.c + q.d * q.d) * Math.sqrt(q.a * q.a + q.b * q.b + q.c * q.c + q.d * q.d));
			other_b2 = 0;
			other_c2 = 0;
			other_d2 = 0;
			other_a1 = _this_a2 * other_a2 - _this_b2 * other_b2 - _this_c2 * other_c2 - _this_d2 * other_d2;
			other_b1 = _this_a2 * other_b2 + _this_b2 * other_a2 + _this_c2 * other_d2 - _this_d2 * other_c2;
			other_c1 = _this_a2 * other_c2 - _this_b2 * other_d2 + _this_c2 * other_a2 + _this_d2 * other_b2;
			other_d1 = _this_a2 * other_d2 + _this_b2 * other_c2 - _this_c2 * other_b2 + _this_d2 * other_a2;
			_this_a = _this_a1 * other_a1 - _this_b1 * other_b1 - _this_c1 * other_c1 - _this_d1 * other_d1;
			_this_b = _this_a1 * other_b1 + _this_b1 * other_a1 + _this_c1 * other_d1 - _this_d1 * other_c1;
			_this_c = _this_a1 * other_c1 - _this_b1 * other_d1 + _this_c1 * other_a1 + _this_d1 * other_b1;
			_this_d = _this_a1 * other_d1 + _this_b1 * other_c1 - _this_c1 * other_b1 + _this_d1 * other_a1;
			_this_x = _this_b;
			_this_y = _this_c;
			_this_z = _this_d;
			var factor = .7 + .5 * this.height[rpVisible];
			this.rpoints[rpVisible] = common_GeoPoint.ofPoint(new sk_thenet_geom_Point3DF(_this_x * factor,_this_y * factor,_this_z * factor));
			++rpVisible;
		}
		if(doScale) {
			this.scale(this.lastScale);
		}
	}
	,scale: function(scale) {
		this.lastScale = scale;
		var ppVisible = 0;
		var _g = 0;
		var _g1 = this.rpoints;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.ppoints[ppVisible] = new sk_thenet_geom_Point2DI(Math.floor(p.x * scale + 200),Math.floor(p.y * scale * .93 + 112 + 70));
			var scale1 = scale * 1.03;
			this.upoints[ppVisible] = new sk_thenet_geom_Point2DI(Math.floor(p.x * scale1 + 200),Math.floor(p.y * scale1 * .93 + 112 + 70));
			++ppVisible;
		}
		this.ptVisible = 0;
		this.stVisible = 0;
		var _g2 = 0;
		var _g11 = this.tiles;
		while(_g2 < _g11.length) {
			var t = _g11[_g2];
			++_g2;
			if(this.rpoints[t.points[0]].z < -.2) {
				t.visible = false;
			} else if(this.ppoints[t.points[0]].y >= 225 && this.ppoints[t.points[1]].y >= 225 && this.ppoints[t.points[2]].y >= 225) {
				t.visible = false;
			} else {
				var p1 = this.ppoints[t.points[0]];
				var p2 = this.ppoints[t.points[1]];
				var p3 = this.ppoints[t.points[2]];
				var area = p1.x * p2.y + p2.x * p3.y + p3.x * p1.y - p2.x * p1.y - p3.x * p2.y - p1.x * p3.y;
				t.visible = area > 0;
				var y = 7 - Math.floor(area * 2.6 / scale);
				t.alpha = 0 > y ? 0 : y;
				var tmp;
				if(t.occupied != -1) {
					var y1 = Math.floor(area * 1.3 / scale);
					if(15 < y1) {
						tmp = 15;
					} else {
						tmp = y1;
					}
				} else {
					var x = Palette.patterns.length - 1;
					var y2 = Math.floor(area * 4 / scale) + (t.pent ? 5 : 0);
					var y3 = (49 < y2 ? 49 : y2) + (t.alpha >> 1) * 50;
					if(x < y3) {
						tmp = x;
					} else {
						tmp = y3;
					}
				}
				t.colour = tmp;
			}
			if(t.visible) {
				this.ptiles[this.ptVisible++] = t;
				if(t.sprite != -1) {
					var xmin = this.ppoints[t.points[0]].x;
					var xmax = this.ppoints[t.points[0]].x;
					var ymin = this.ppoints[t.points[0]].y;
					var ymax = this.ppoints[t.points[0]].y;
					var _g21 = 1;
					while(_g21 < 3) {
						var i = _g21++;
						if(this.ppoints[t.points[i]].x < xmin) {
							xmin = this.ppoints[t.points[i]].x;
						}
						if(this.ppoints[t.points[i]].x > xmax) {
							xmax = this.ppoints[t.points[i]].x;
						}
						if(this.ppoints[t.points[i]].y < ymin) {
							ymin = this.ppoints[t.points[i]].y;
						}
						if(this.ppoints[t.points[i]].y > ymax) {
							ymax = this.ppoints[t.points[i]].y;
						}
					}
					t.spriteX = xmin + xmax >> 1;
					t.spriteY = ymin + ymax >> 1;
					var oangle = Math.atan2(205 - t.spriteY,200 - t.spriteX);
					t.spriteOX = Math.cos(oangle) * 4;
					t.spriteOY = Math.sin(oangle) * 4;
					t.spriteAngle = Math.atan2(265 - t.spriteY,200 - t.spriteX) - Math.PI * .5;
					this.stiles[this.stVisible++] = t;
				}
			}
		}
	}
	,render: function(bmp) {
		var _gthis = this;
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			this.facLight[i] = this.facLightPattern[i * 120 + this.ph * (i < 4 ? 1 : 2) % 120];
		}
		var lastSelect = this.select;
		this.select = null;
		var _g1 = 0;
		var _g2 = this.ptVisible;
		while(_g1 < _g2) {
			var rti = _g1++;
			var tile = this.ptiles[rti];
			var sel = tile == lastSelect;
			var ly = -1;
			var txmin = 399;
			var txmax = 0;
			var c = tile.colour;
			if(sel) {
				c += tile.occupied == -1 ? 10 : 2;
			}
			if(tile.occupied != -1) {
				c += this.facLight[tile.occupied];
			}
			var p = tile.occupied == -1 ? new common_TopDownBresenhams(this.ppoints[tile.points[0]],this.ppoints[tile.points[1]],this.ppoints[tile.points[2]]) : new common_TopDownBresenhams(this.upoints[tile.points[0]],this.upoints[tile.points[1]],this.upoints[tile.points[2]]);
			while(p.hasNext()) {
				var p1 = p.next();
				if(p1.y != ly && ly != -1) {
					if(txmax >= txmin) {
						var tmp;
						if(sk_thenet_plat_js_canvas_Platform.mouse.y == ly) {
							var x = sk_thenet_plat_js_canvas_Platform.mouse.x;
							if(x >= txmin) {
								tmp = x <= txmax;
							} else {
								tmp = false;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							_gthis.select = tile;
						}
						bmp.c2d.fillStyle = tile.occupied != -1 ? Palette.facPatterns[tile.occupied][c] : Palette.patterns[c];
						bmp.c2d.fillRect(txmin,ly,txmax - txmin,1);
						bmp.changed = true;
					}
					txmin = 399;
					txmax = 0;
				}
				if(txmin > p1.x) {
					txmin = p1.x;
				}
				if(txmax < p1.x) {
					txmax = p1.x;
				}
				ly = p1.y;
			}
			if(ly != -1) {
				if(txmax >= txmin) {
					var tmp1;
					if(sk_thenet_plat_js_canvas_Platform.mouse.y == ly) {
						var x1 = sk_thenet_plat_js_canvas_Platform.mouse.x;
						if(x1 >= txmin) {
							tmp1 = x1 <= txmax;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						_gthis.select = tile;
					}
					bmp.c2d.fillStyle = tile.occupied != -1 ? Palette.facPatterns[tile.occupied][c] : Palette.patterns[c];
					bmp.c2d.fillRect(txmin,ly,txmax - txmin,1);
					bmp.changed = true;
				}
				txmin = 399;
				txmax = 0;
			}
		}
		var _g11 = 0;
		var _g3 = this.stVisible;
		while(_g11 < _g3) {
			var rti1 = _g11++;
			var tile1 = this.stiles[rti1];
			var this1 = Sprites.factionSigns[tile1.sprite];
			var alpha = tile1.alpha;
			var angle = tile1.spriteAngle;
			while(angle < 0) angle += Math.PI * 2;
			var angles = Math.floor(this1.length >> 3);
			var di = angle / (Math.PI * 2) * angles;
			var df = di - Math.floor(di);
			var dc = Math.ceil(di) - di;
			var src = this1[alpha * angles + (df <= dc ? Math.floor(di) : Math.ceil(di)) % angles];
			bmp.c2d.drawImage(src["native"],0,0,src.width,src.height,tile1.spriteX - 24 + Math.floor(this.spriteOffsetPattern[this.ph] * tile1.spriteOX),tile1.spriteY - 24 + Math.floor(this.spriteOffsetPattern[this.ph] * tile1.spriteOY),src.width,src.height);
			bmp.changed = true;
			if(bmp.changed) {
				var data8 = bmp.c2d.getImageData(0,0,bmp.width,bmp.height).data;
				var j = 0;
				var _g12 = 0;
				var _g4 = bmp.size32;
				while(_g12 < _g4) {
					var i1 = _g12++;
					var this2 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
					bmp.data[i1] = this2;
					j += 4;
				}
				bmp.changed = false;
			}
		}
		this.ph++;
		this.ph %= 120;
	}
	,__class__: common_Geodesic
};
var common_TopDownBresenhams = function(p1,p2,p3) {
	this.b1 = sk_thenet_stream_bmp_Bresenham.getTopDown(p1,p2);
	this.b2 = sk_thenet_stream_bmp_Bresenham.getTopDown(p2,p3);
	this.b3 = sk_thenet_stream_bmp_Bresenham.getTopDown(p3,p1);
};
common_TopDownBresenhams.__name__ = true;
common_TopDownBresenhams.prototype = {
	hasNext: function() {
		if(!(this.f1 != null || this.b1.continueFunc() || (this.f2 != null || this.b2.continueFunc()))) {
			if(this.f3 == null) {
				return this.b3.continueFunc();
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,next: function() {
		if(this.f1 == null && this.b1.continueFunc()) {
			this.f1 = this.b1.streamFunc();
		}
		if(this.f2 == null && this.b2.continueFunc()) {
			this.f2 = this.b2.streamFunc();
		}
		if(this.f3 == null && this.b3.continueFunc()) {
			this.f3 = this.b3.streamFunc();
		}
		var ret = null;
		if(this.f1 == null) {
			if(this.f2 == null) {
				ret = this.f3;
				this.f3 = null;
				return ret;
			}
			if(this.f3 == null) {
				ret = this.f2;
				this.f2 = null;
				return ret;
			}
		}
		if(this.f2 == null) {
			if(this.f1 == null) {
				ret = this.f3;
				this.f3 = null;
				return ret;
			}
			if(this.f3 == null) {
				ret = this.f1;
				this.f1 = null;
				return ret;
			}
		}
		if(this.f3 == null) {
			if(this.f2 == null) {
				ret = this.f1;
				this.f1 = null;
				return ret;
			}
			if(this.f1 == null) {
				ret = this.f2;
				this.f2 = null;
				return ret;
			}
		}
		if(this.f1 != null && ((this.f2 == null || this.f1.y <= this.f2.y) && (this.f3 == null || this.f1.y <= this.f3.y))) {
			ret = this.f1;
			this.f1 = null;
		} else if(this.f2 != null && (this.f3 == null || this.f2.y <= this.f3.y)) {
			ret = this.f2;
			this.f2 = null;
		} else {
			ret = this.f3;
			this.f3 = null;
		}
		return ret;
	}
	,__class__: common_TopDownBresenhams
};
var common_Tile = function(points) {
	this.spriteOY = -1;
	this.spriteOX = -1;
	this.spriteAngle = -1;
	this.spriteY = -1;
	this.spriteX = -1;
	this.sprite = -1;
	this.occupied = -1;
	this.adjacent = [];
	this.points = points;
};
common_Tile.__name__ = true;
common_Tile.prototype = {
	__class__: common_Tile
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
haxe_ds__$Vector_Vector_$Impl_$.__name__ = true;
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var k = _g1++;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var k1 = _g11++;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var haxe_zip_Compress = function() { };
haxe_zip_Compress.__name__ = true;
haxe_zip_Compress.run = function(s,level) {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
var haxe_zip_Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe_zip_Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
haxe_zip_Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe_zip_Huffman; $x.toString = $estr; return $x; };
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe_zip__$InflateImpl_State.Head = ["Head",0];
haxe_zip__$InflateImpl_State.Head.toString = $estr;
haxe_zip__$InflateImpl_State.Head.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Block = ["Block",1];
haxe_zip__$InflateImpl_State.Block.toString = $estr;
haxe_zip__$InflateImpl_State.Block.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.CData = ["CData",2];
haxe_zip__$InflateImpl_State.CData.toString = $estr;
haxe_zip__$InflateImpl_State.CData.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Flat = ["Flat",3];
haxe_zip__$InflateImpl_State.Flat.toString = $estr;
haxe_zip__$InflateImpl_State.Flat.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Crc = ["Crc",4];
haxe_zip__$InflateImpl_State.Crc.toString = $estr;
haxe_zip__$InflateImpl_State.Crc.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Dist = ["Dist",5];
haxe_zip__$InflateImpl_State.Dist.toString = $estr;
haxe_zip__$InflateImpl_State.Dist.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.DistOne = ["DistOne",6];
haxe_zip__$InflateImpl_State.DistOne.toString = $estr;
haxe_zip__$InflateImpl_State.DistOne.__enum__ = haxe_zip__$InflateImpl_State;
haxe_zip__$InflateImpl_State.Done = ["Done",7];
haxe_zip__$InflateImpl_State.Done.toString = $estr;
haxe_zip__$InflateImpl_State.Done.__enum__ = haxe_zip__$InflateImpl_State;
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		if(len < 0 || len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b1 = output.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i1 = _g1++;
			output.b.push(b2[i1]);
		}
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var sk_thenet_stream_prng__$Generator_Generator_$Impl_$ = {};
sk_thenet_stream_prng__$Generator_Generator_$Impl_$.__name__ = true;
sk_thenet_stream_prng__$Generator_Generator_$Impl_$._new = function(stream) {
	var this1 = stream;
	return this1;
};
var sk_thenet_stream_Stream = function(continueFunc,streamFunc) {
	this.continueFunc = continueFunc;
	this.streamFunc = streamFunc;
	this.operated = false;
};
sk_thenet_stream_Stream.__name__ = true;
sk_thenet_stream_Stream.always = function() {
	return true;
};
sk_thenet_stream_Stream.prototype = {
	hasNext: function() {
		return this.continueFunc();
	}
	,next: function() {
		return this.streamFunc();
	}
	,__class__: sk_thenet_stream_Stream
};
var sk_thenet_stream_prng_XORShift = function(seed) {
	var _gthis = this;
	sk_thenet_stream_Stream.call(this,sk_thenet_stream_Stream.always,function() {
		var t = _gthis.x;
		t = t ^ t << 11;
		t = t ^ t >>> 8;
		_gthis.x = _gthis.y;
		_gthis.y = _gthis.z;
		_gthis.z = _gthis.s;
		_gthis.s = _gthis.s ^ _gthis.s >>> 19;
		_gthis.s = _gthis.s ^ t;
		return _gthis.s;
	});
	this.s = seed;
	this.x = seed << 1;
	this.y = seed << 2;
	this.z = seed << 3;
	this.seed = seed;
};
sk_thenet_stream_prng_XORShift.__name__ = true;
sk_thenet_stream_prng_XORShift.__super__ = sk_thenet_stream_Stream;
sk_thenet_stream_prng_XORShift.prototype = $extend(sk_thenet_stream_Stream.prototype,{
	__class__: sk_thenet_stream_prng_XORShift
});
var sk_thenet_FM = function() { };
sk_thenet_FM.__name__ = true;
var sk_thenet_anim__$Timing_Timing_$Impl_$ = {};
sk_thenet_anim__$Timing_Timing_$Impl_$.__name__ = true;
var sk_thenet_app_ApplicationInit = { __ename__ : true, __constructs__ : ["Assets","Console","ConsoleRemote","Framerate","Keyboard","Mouse","Surface","Window"] };
sk_thenet_app_ApplicationInit.Assets = function(assets) { var $x = ["Assets",0,assets]; $x.__enum__ = sk_thenet_app_ApplicationInit; $x.toString = $estr; return $x; };
sk_thenet_app_ApplicationInit.Console = ["Console",1];
sk_thenet_app_ApplicationInit.Console.toString = $estr;
sk_thenet_app_ApplicationInit.Console.__enum__ = sk_thenet_app_ApplicationInit;
sk_thenet_app_ApplicationInit.ConsoleRemote = function(host,port) { var $x = ["ConsoleRemote",2,host,port]; $x.__enum__ = sk_thenet_app_ApplicationInit; $x.toString = $estr; return $x; };
sk_thenet_app_ApplicationInit.Framerate = function(fps) { var $x = ["Framerate",3,fps]; $x.__enum__ = sk_thenet_app_ApplicationInit; $x.toString = $estr; return $x; };
sk_thenet_app_ApplicationInit.Keyboard = ["Keyboard",4];
sk_thenet_app_ApplicationInit.Keyboard.toString = $estr;
sk_thenet_app_ApplicationInit.Keyboard.__enum__ = sk_thenet_app_ApplicationInit;
sk_thenet_app_ApplicationInit.Mouse = ["Mouse",5];
sk_thenet_app_ApplicationInit.Mouse.toString = $estr;
sk_thenet_app_ApplicationInit.Mouse.__enum__ = sk_thenet_app_ApplicationInit;
sk_thenet_app_ApplicationInit.Surface = function(width,height,scale) { var $x = ["Surface",6,width,height,scale]; $x.__enum__ = sk_thenet_app_ApplicationInit; $x.toString = $estr; return $x; };
sk_thenet_app_ApplicationInit.Window = function(title,width,height) { var $x = ["Window",7,title,width,height]; $x.__enum__ = sk_thenet_app_ApplicationInit; $x.toString = $estr; return $x; };
var sk_thenet_event_ISource = function() { };
sk_thenet_event_ISource.__name__ = true;
var sk_thenet_event_Source = function() {
	this.listenTo = [];
	this.listeners = [];
};
sk_thenet_event_Source.__name__ = true;
sk_thenet_event_Source.__interfaces__ = [sk_thenet_event_ISource];
sk_thenet_event_Source.prototype = {
	fireEvent: function(event) {
		var _g1 = 0;
		var _g = this.listenTo.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.listenTo[i] == event.type && this.listeners[i](event)) {
				break;
			}
		}
	}
	,listen: function(type,listener,priority) {
		if(priority == null) {
			priority = false;
		}
		if(priority) {
			this.listenTo.unshift(type);
			this.listeners.unshift(listener);
		} else {
			this.listenTo.push(type);
			this.listeners.push(listener);
		}
	}
	,forward: function(type,source) {
		var _gthis = this;
		source.listen(type,function(event) {
			_gthis.fireEvent(event);
			return true;
		});
	}
	,__class__: sk_thenet_event_Source
};
var sk_thenet_app_Asset = function(type,id,filename) {
	this.status = sk_thenet_app_AssetStatus.None;
	sk_thenet_event_Source.call(this);
	this.type = type;
	this.id = id;
	this.filename = filename;
};
sk_thenet_app_Asset.__name__ = true;
sk_thenet_app_Asset.__super__ = sk_thenet_event_Source;
sk_thenet_app_Asset.prototype = $extend(sk_thenet_event_Source.prototype,{
	update: function(data) {
		this.fireEvent(new sk_thenet_event_Event(this,"change"));
	}
	,preload: function() {
	}
	,listen: function(type,listener,priority) {
		if(priority == null) {
			priority = false;
		}
		sk_thenet_event_Source.prototype.listen.call(this,type,listener,priority);
		if(type == "change" && this.status == sk_thenet_app_AssetStatus.Loaded) {
			var ev = new sk_thenet_event_Event(this,"change");
			listener(ev);
		}
	}
	,__class__: sk_thenet_app_Asset
});
var sk_thenet_app_AssetStatus = { __ename__ : true, __constructs__ : ["None","Error","Loading","Loaded","Reloading"] };
sk_thenet_app_AssetStatus.None = ["None",0];
sk_thenet_app_AssetStatus.None.toString = $estr;
sk_thenet_app_AssetStatus.None.__enum__ = sk_thenet_app_AssetStatus;
sk_thenet_app_AssetStatus.Error = function(msg) { var $x = ["Error",1,msg]; $x.__enum__ = sk_thenet_app_AssetStatus; $x.toString = $estr; return $x; };
sk_thenet_app_AssetStatus.Loading = function(completion) { var $x = ["Loading",2,completion]; $x.__enum__ = sk_thenet_app_AssetStatus; $x.toString = $estr; return $x; };
sk_thenet_app_AssetStatus.Loaded = ["Loaded",3];
sk_thenet_app_AssetStatus.Loaded.toString = $estr;
sk_thenet_app_AssetStatus.Loaded.__enum__ = sk_thenet_app_AssetStatus;
sk_thenet_app_AssetStatus.Reloading = function(completion) { var $x = ["Reloading",4,completion]; $x.__enum__ = sk_thenet_app_AssetStatus; $x.toString = $estr; return $x; };
var sk_thenet_app_AssetType = { __ename__ : true, __constructs__ : ["Bind","Trigger","Bitmap","Sound"] };
sk_thenet_app_AssetType.Bind = ["Bind",0];
sk_thenet_app_AssetType.Bind.toString = $estr;
sk_thenet_app_AssetType.Bind.__enum__ = sk_thenet_app_AssetType;
sk_thenet_app_AssetType.Trigger = ["Trigger",1];
sk_thenet_app_AssetType.Trigger.toString = $estr;
sk_thenet_app_AssetType.Trigger.__enum__ = sk_thenet_app_AssetType;
sk_thenet_app_AssetType.Bitmap = ["Bitmap",2];
sk_thenet_app_AssetType.Bitmap.toString = $estr;
sk_thenet_app_AssetType.Bitmap.__enum__ = sk_thenet_app_AssetType;
sk_thenet_app_AssetType.Sound = ["Sound",3];
sk_thenet_app_AssetType.Sound.toString = $estr;
sk_thenet_app_AssetType.Sound.__enum__ = sk_thenet_app_AssetType;
var sk_thenet_app_AssetManager = function(assets) {
	if(assets == null) {
		assets = [];
	}
	this.assets = assets;
	this.assetsMap = new haxe_ds_StringMap();
	this.assetsLoaded = true;
	var _g = 0;
	while(_g < assets.length) {
		var a = assets[_g];
		++_g;
		this.add(a);
	}
};
sk_thenet_app_AssetManager.__name__ = true;
sk_thenet_app_AssetManager.prototype = {
	add: function(a) {
		var _gthis = this;
		a.manager = this;
		var _g = a.type;
		switch(_g[1]) {
		case 0:case 1:
			var bind = a;
			var _g1 = 0;
			var _g11 = bind.bindTo;
			while(_g1 < _g11.length) {
				var b = _g11[_g1];
				++_g1;
				if(!this.assetsMap.exists(b)) {
					throw new js__$Boot_HaxeError("invalid bind");
				}
				this.assetsMap.get(b).listen("change",function(event) {
					var _g2 = 0;
					var _g3 = bind.bindTo;
					while(_g2 < _g3.length) {
						var b1 = _g3[_g2];
						++_g2;
						if(!_gthis.isLoaded(b1)) {
							return false;
						}
					}
					return bind.func(_gthis,event);
				});
			}
			break;
		default:
			if(a.status != sk_thenet_app_AssetStatus.Loaded) {
				this.assetsLoaded = false;
				a.preload();
			}
		}
		if(a.id != "") {
			var key = a.id;
			var _this = this.assetsMap;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,a);
			} else {
				_this.h[key] = a;
			}
		}
	}
	,isLoaded: function(id) {
		var _this = this.assetsMap;
		if(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id)) {
			var _this1 = this.assetsMap;
			return (__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).status == sk_thenet_app_AssetStatus.Loaded;
		}
		return false;
	}
	,getBitmap: function(id) {
		if(!this.isLoaded(id)) {
			return null;
		}
		var _this = this.assetsMap;
		if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).type != sk_thenet_app_AssetType.Bitmap) {
			throw new js__$Boot_HaxeError("asset type mismatch");
		}
		var _this1 = this.assetsMap;
		return (__map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id]).current;
	}
	,attachConsole: function(console) {
		console.listen("file",$bind(this,this.handleFile));
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.filename != null) {
				console.monitor(a.filename);
			}
		}
	}
	,updateLoad: function(id) {
		this.assetsLoaded = true;
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset.type != sk_thenet_app_AssetType.Bind && asset.status != sk_thenet_app_AssetStatus.Loaded) {
				this.assetsLoaded = false;
				return;
			}
		}
	}
	,handleFile: function(ev) {
		console.log("handling " + ev.name);
		var _g = 0;
		var _g1 = this.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(asset.filename != null && asset.filename == ev.name) {
				asset.update(ev.dataFunc());
				return true;
			}
		}
		return false;
	}
	,__class__: sk_thenet_app_AssetManager
};
var sk_thenet_app_Console = function() {
	this.history = [];
	this.command = "";
	this.show = false;
	this.frameSlow = 0;
	this.pause = false;
	this.applicationTick = true;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 20) {
		var i = _g1++;
		_g.push("");
	}
	this.history = _g;
	this.history[18] = "+ plustd console";
	this.history[19] = "  by Aurel B%l& (thenet.sk)";
	sk_thenet_event_Source.call(this);
};
sk_thenet_app_Console.__name__ = true;
sk_thenet_app_Console.__super__ = sk_thenet_event_Source;
sk_thenet_app_Console.prototype = $extend(sk_thenet_event_Source.prototype,{
	set_assetManager: function(assetManager) {
		var _gthis = this;
		if(assetManager == null) {
			return null;
		}
		this.assetManager = assetManager;
		assetManager.add(new sk_thenet_app_asset_Bind(["console_font"],function(assetManager1,event) {
			var this1 = assetManager1.getBitmap("console_font");
			var fluent = this1;
			fluent = sk_thenet_bmp_Font.spreadGrid(fluent,8,16,1,1,1,1);
			new sk_thenet_bmp_manip_Recolour(15658734).manipulate(fluent);
			var this2 = fluent;
			var this3 = this2;
			new sk_thenet_bmp_manip_Shadow(-10066330,1,0).manipulate(this3);
			var this4 = this3;
			var this5 = this4;
			new sk_thenet_bmp_manip_Glow(-1724697805).manipulate(this5);
			var this6 = this5;
			_gthis.font = sk_thenet_bmp_Font.makeMonospaced(fluent,32,160,10,18,32,-3,0);
			_gthis.renderHistory();
			return true;
		}));
		return assetManager;
	}
	,set_keyboard: function(keyboard) {
		if(keyboard == null) {
			return null;
		}
		this.keyboard = keyboard;
		sk_thenet_plat_js_canvas_Platform.source.listen("kup",$bind(this,this.handleKey),true);
		return keyboard;
	}
	,set_surface: function(surface) {
		if(surface == null) {
			return null;
		}
		this.surface = surface;
		this.height = (surface.bitmap.height >> 2) * 3;
		this.createBg();
		this.renderHistory();
		return surface;
	}
	,attachRemote: function(host,port) {
		this.remote = new sk_thenet_net_ws_ConsoleLink();
		this.remote.listen("connect",$bind(this,this.handleConnect));
		this.remote.listen("data",$bind(this,this.handleData));
		this.forward("file",this.remote);
		this.remote.connect(host,port);
	}
	,handleConnect: function(event) {
		this.history.push("RL connected");
		this.renderHistory();
		return true;
	}
	,handleData: function(event) {
		this.history.push("RL: " + event.data.toString());
		this.renderHistory();
		return true;
	}
	,monitor: function(file) {
		if(this.remote == null) {
			return;
		}
		this.remote.monitor(file);
	}
	,createBg: function() {
		var width = this.surface.bitmap.width;
		var height = this.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		this.bg = bmp;
		var width2 = this.surface.bitmap.width;
		var height2 = this.height;
		var canvas1 = window.document.createElement("canvas");
		canvas1.width = width2;
		canvas1.height = height2;
		var bmp1 = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas1);
		var width3 = bmp1.width;
		var height3 = bmp1.height;
		if(0 >>> 24 != 255) {
			bmp1.c2d.clearRect(0,0,width3,height3);
		}
		bmp1.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp1.c2d.fillRect(0,0,width3,height3);
		bmp1.changed = true;
		this.historyCache = bmp1;
		var _this = this.bg;
		if(_this.changed) {
			var data8 = _this.c2d.getImageData(0,0,_this.width,_this.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = _this.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				_this.data[i] = this1;
				j += 4;
			}
			_this.changed = false;
		}
		var vec = _this.data;
		var i1 = 0;
		var this2 = 857866240;
		var base = this2;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.surface.bitmap.width;
			while(_g3 < _g21) {
				var x = _g3++;
				vec[i1] = (base & -256 | (y / (this.height * 2) * 255 | 0)) & -65281 | (x / (this.surface.bitmap.width * 2) * 255 | 0) << 8;
				++i1;
			}
		}
		var _this1 = this.bg;
		_this1.data = vec;
		var data81 = new Uint8ClampedArray(_this1.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g4 = _this1.size32;
		while(_g12 < _g4) {
			var i2 = _g12++;
			data81[j1] = _this1.data[i2] >>> 16 & 255;
			data81[j1 + 1] = _this1.data[i2] >>> 8 & 255;
			data81[j1 + 2] = _this1.data[i2] & 255;
			data81[j1 + 3] = _this1.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(_this1.width,_this1.height);
		idata.data.set(data81);
		_this1.c2d.putImageData(idata,0,0,0,0,_this1.width,_this1.height);
		_this1.changed = false;
	}
	,renderHistory: function() {
		if(this.font == null || this.surface == null) {
			return;
		}
		if(this.history.length > 20) {
			this.history = this.history.slice(this.history.length - 20);
		}
		var width = this.surface.bitmap.width;
		var height = this.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		this.historyCache = bmp;
		var cy = this.height - 24;
		var _g1 = 0;
		var _g = this.history.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ri = this.history.length - i - 1;
			this.font.render(this.historyCache,0,cy,this.history[ri]);
			cy -= 12;
			if(cy < -12) {
				break;
			}
		}
	}
	,handleKey: function(e) {
		if(!this.show) {
			if(e.key == 42) {
				this.show = true;
				return true;
			}
			return false;
		}
		var _g = e.key;
		var tmp;
		switch(_g) {
		case 41:
			var x = this.command.length - 1;
			tmp = HxOverrides.substr(this.command,0,x > 0 ? x : 0);
			break;
		case 42:
			var trimmed = StringTools.trim(this.command);
			var words = trimmed.split(" ");
			var response = [];
			var showCommand = true;
			var _g1 = words[0];
			switch(_g1) {
			case "app":case "init":case "inits":
				if(this.applicationInits != null) {
					var _g2 = [];
					var _g11 = 0;
					var _g21 = this.applicationInits;
					while(_g11 < _g21.length) {
						var init = _g21[_g11];
						++_g11;
						var response1;
						switch(init[1]) {
						case 0:
							response1 = "- assets";
							break;
						case 1:
							response1 = "- console";
							break;
						case 3:
							var f = init[2];
							response1 = "- framerate(" + f + ")";
							break;
						case 4:
							response1 = "- keyboard";
							break;
						case 5:
							response1 = "- mouse";
							break;
						case 6:
							var s = init[4];
							var h = init[3];
							var w = init[2];
							response1 = "- surface(" + w + ", " + h + ", " + s + ")";
							break;
						case 7:
							var h1 = init[4];
							var w1 = init[3];
							var t = init[2];
							response1 = "- window(" + t + ", " + w1 + ", " + h1 + ")";
							break;
						default:
							response1 = "- ???";
						}
						_g2.push(response1);
					}
					response = _g2;
				} else {
					response = ["Inits unknown!"];
				}
				break;
			case "clear":case "clr":case "cls":
				var _g3 = [];
				var _g12 = 0;
				while(_g12 < 20) {
					var i = _g12++;
					_g3.push("");
				}
				this.history = _g3;
				showCommand = false;
				break;
			case "":case "exit":case "hide":case "q":case "qu":case "quit":
				this.show = false;
				showCommand = false;
				break;
			case "f":case "frame":case "slow":case "speed":
				if(words.length == 2) {
					this.frameCount = 0;
					var _g4 = words[1];
					var _hx_tmp = Std.parseInt(_g4);
					var h2 = _hx_tmp;
					var tmp1;
					if(h2 != null) {
						tmp1 = h2;
					} else {
						response = ["Invalid parameter!"];
						tmp1 = this.frameSlow;
					}
					this.frameSlow = tmp1;
				} else {
					response = ["Invalid command format!"];
				}
				break;
			case "height":case "size":
				if(words.length == 2) {
					var _g5 = words[1];
					var _hx_tmp1;
					var tmp2;
					switch(_g5) {
					case "d":case "default":
						tmp2 = (this.surface.bitmap.height >> 2) * 3;
						break;
					case "f":case "full":
						tmp2 = this.surface.bitmap.height;
						break;
					case "h":case "half":
						tmp2 = this.surface.bitmap.height >> 1;
						break;
					default:
						_hx_tmp1 = Std.parseInt(_g5);
						var h3 = _hx_tmp1;
						if(h3 != null) {
							var max = this.surface.bitmap.height;
							if(h3 < 10) {
								tmp2 = 10;
							} else if(h3 > max) {
								tmp2 = max;
							} else {
								tmp2 = h3;
							}
						} else {
							response = ["Invalid parameter!"];
							tmp2 = this.height;
						}
					}
					this.height = tmp2;
					this.createBg();
					this.renderHistory();
				} else {
					response = ["Invalid command format!"];
				}
				break;
			case "p":case "pause":case "stop":case "suspend":
				this.pause = true;
				response = ["Paused!"];
				break;
			case "screen":case "screenshot":case "shot":case "snap":case "snapshot":case "ss":
				if(this.lastFrame != null) {
					var enc = new sk_thenet_format_bmp_PNG();
					this.remote.sendFile(enc.encode(this.lastFrame));
				} else {
					response = ["No frame known!"];
				}
				break;
			case "play":case "resume":case "u":case "unpause":case "up":
				this.pause = false;
				response = ["Unpaused!"];
				break;
			default:
				response = ["Unknown command!"];
			}
			if(showCommand) {
				this.history.push("> " + trimmed);
			}
			this.history = this.history.concat(response);
			this.renderHistory();
			tmp = "";
			break;
		default:
			var key = e.key;
			tmp = this.command + (key >= 4 && key <= 40 || key == 42 ? sk_thenet_app_Keyboard.KEY_CHARACTERS.charAt(key - 4) : "");
		}
		this.command = tmp;
		return true;
	}
	,tick: function() {
		if(this.surface == null) {
			return;
		}
		if(this.applicationTick) {
			var width = this.surface.bitmap.width;
			var height = this.surface.bitmap.height;
			var canvas = window.document.createElement("canvas");
			canvas.width = width;
			canvas.height = height;
			var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
			var width1 = bmp.width;
			var height1 = bmp.height;
			if(0 >>> 24 != 255) {
				bmp.c2d.clearRect(0,0,width1,height1);
			}
			bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
			bmp.c2d.fillRect(0,0,width1,height1);
			bmp.changed = true;
			this.lastFrame = bmp;
			var _this = this.lastFrame;
			var src = this.surface.bitmap;
			_this.c2d.drawImage(src["native"],0,0,src.width,src.height,0,0,src.width,src.height);
			_this.changed = true;
			if(_this.changed) {
				var data8 = _this.c2d.getImageData(0,0,_this.width,_this.height).data;
				var j = 0;
				var _g1 = 0;
				var _g = _this.size32;
				while(_g1 < _g) {
					var i = _g1++;
					var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
					_this.data[i] = this1;
					j += 4;
				}
				_this.changed = false;
			}
		}
		if(!this.show && this.lastFrame != null && !this.applicationTick) {
			var _this1 = this.surface.bitmap;
			var width2 = _this1.width;
			var height2 = _this1.height;
			if(0 >>> 24 != 255) {
				_this1.c2d.clearRect(0,0,width2,height2);
			}
			_this1.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
			_this1.c2d.fillRect(0,0,width2,height2);
			_this1.changed = true;
			var _this2 = this.surface.bitmap;
			var src1 = this.lastFrame;
			_this2.c2d.drawImage(src1["native"],0,0,src1.width,src1.height,0,0,src1.width,src1.height);
			_this2.changed = true;
			if(_this2.changed) {
				var data81 = _this2.c2d.getImageData(0,0,_this2.width,_this2.height).data;
				var j1 = 0;
				var _g11 = 0;
				var _g2 = _this2.size32;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var this2 = data81[j1 + 3] << 24 | data81[j1] << 16 | data81[j1 + 1] << 8 | data81[j1 + 2];
					_this2.data[i1] = this2;
					j1 += 4;
				}
				_this2.changed = false;
			}
		}
		if(this.show) {
			if(!this.applicationTick) {
				var _this3 = this.surface.bitmap;
				var src2 = this.lastFrame;
				_this3.c2d.drawImage(src2["native"],0,0,src2.width,src2.height,0,0,src2.width,src2.height);
				_this3.changed = true;
				if(_this3.changed) {
					var data82 = _this3.c2d.getImageData(0,0,_this3.width,_this3.height).data;
					var j2 = 0;
					var _g12 = 0;
					var _g3 = _this3.size32;
					while(_g12 < _g3) {
						var i2 = _g12++;
						var this3 = data82[j2 + 3] << 24 | data82[j2] << 16 | data82[j2 + 1] << 8 | data82[j2 + 2];
						_this3.data[i2] = this3;
						j2 += 4;
					}
					_this3.changed = false;
				}
			}
			var _this4 = this.surface.bitmap;
			var src3 = this.bg;
			_this4.c2d.drawImage(src3["native"],0,0,src3.width,src3.height,0,0,src3.width,src3.height);
			_this4.changed = true;
			if(_this4.changed) {
				var data83 = _this4.c2d.getImageData(0,0,_this4.width,_this4.height).data;
				var j3 = 0;
				var _g13 = 0;
				var _g4 = _this4.size32;
				while(_g13 < _g4) {
					var i3 = _g13++;
					var this4 = data83[j3 + 3] << 24 | data83[j3] << 16 | data83[j3 + 1] << 8 | data83[j3 + 2];
					_this4.data[i3] = this4;
					j3 += 4;
				}
				_this4.changed = false;
			}
			var _this5 = this.surface.bitmap;
			var src4 = this.historyCache;
			_this5.c2d.drawImage(src4["native"],0,0,src4.width,src4.height,0,0,src4.width,src4.height);
			_this5.changed = true;
			if(_this5.changed) {
				var data84 = _this5.c2d.getImageData(0,0,_this5.width,_this5.height).data;
				var j4 = 0;
				var _g14 = 0;
				var _g5 = _this5.size32;
				while(_g14 < _g5) {
					var i4 = _g14++;
					var this5 = data84[j4 + 3] << 24 | data84[j4] << 16 | data84[j4 + 1] << 8 | data84[j4 + 2];
					_this5.data[i4] = this5;
					j4 += 4;
				}
				_this5.changed = false;
			}
			this.font.render(this.surface.bitmap,0,this.height - 12,"> " + this.command + "_");
		}
		this.applicationTick = this.pause ? false : this.frameSlow != 0 ? this.frameCount == 0 : true;
		if(this.frameSlow != 0) {
			this.frameCount++;
			this.frameCount %= this.frameSlow;
		}
	}
	,__class__: sk_thenet_app_Console
});
var sk_thenet_app_Keyboard = function() {
	var this1 = new Array(43);
	this.keysHeld = this1;
	var _g1 = 0;
	var _g = this.keysHeld.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.keysHeld[i] = false;
	}
};
sk_thenet_app_Keyboard.__name__ = true;
sk_thenet_app_Keyboard.prototype = {
	__class__: sk_thenet_app_Keyboard
};
var sk_thenet_app_Mouse = function() {
	this.held = false;
	this.y = 0;
	this.x = 0;
};
sk_thenet_app_Mouse.__name__ = true;
sk_thenet_app_Mouse.prototype = {
	__class__: sk_thenet_app_Mouse
};
var sk_thenet_app_Preloader = function(id,app) {
	sk_thenet_app_State.call(this,id,app);
};
sk_thenet_app_Preloader.__name__ = true;
sk_thenet_app_Preloader.__super__ = sk_thenet_app_State;
sk_thenet_app_Preloader.prototype = $extend(sk_thenet_app_State.prototype,{
	progress: function(assets) {
	}
	,__class__: sk_thenet_app_Preloader
});
var sk_thenet_app_TNPreloader = function(app,nextState,fast) {
	if(fast == null) {
		fast = false;
	}
	this.loaded = 0;
	var _gthis = this;
	sk_thenet_app_Preloader.call(this,"preloader",app);
	this.nextState = nextState;
	this.fast = fast;
	this.phase = sk_thenet_app__$TNPreloader_TNPhase.Waiting(10,sk_thenet_app__$TNPreloader_TNPhase.Rect(0));
	this.rectTiming = sk_thenet_anim__$Timing_Timing_$Impl_$.quadInOut;
	this.pal = [-35038,-5636096,-11206622,-3355444,-6710887,-10066330,-13421773];
	var logo16 = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,3,3,4,4,5,1,1,1,1,1,2,1,1,1,1,4,3,4,4,4,5,6,1,1,1,1,2,1,1,1,1,0,0,0,0,0,0,0,2,1,1,1,2,1,1,1,1,1,5,5,5,6,6,2,2,1,1,1,2,1,1,1,1,5,4,4,4,4,5,6,2,1,1,1,2,1,1,1,1,5,3,4,4,4,5,6,2,1,1,1,2,1,1,1,1,4,6,4,4,5,6,5,2,1,1,1,2,1,1,1,1,4,5,2,2,4,2,5,2,1,1,1,2,1,1,1,1,3,5,2,1,4,2,4,2,1,1,1,2,1,1,1,1,3,5,2,1,1,2,3,2,1,1,1,2,1,1,1,1,4,2,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2].map(function(i) {
		return _gthis.pal[i];
	}).slice(0);
	var this1 = new Array(4096);
	var logo64 = this1;
	var i1 = 0;
	var _g = 0;
	while(_g < 64) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < 64) {
			var x = _g1++;
			logo64[i1] = logo16[(x >> 2) + (y >> 2 << 4)];
			++i1;
		}
	}
	var canvas = window.document.createElement("canvas");
	canvas.width = 64;
	canvas.height = 64;
	var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
	var width = bmp.width;
	var height = bmp.height;
	if(0 >>> 24 != 255) {
		bmp.c2d.clearRect(0,0,width,height);
	}
	bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
	bmp.c2d.fillRect(0,0,width,height);
	bmp.changed = true;
	this.logo = bmp;
	var _this = this.logo;
	_this.data = logo64;
	var data8 = new Uint8ClampedArray(_this.size8);
	var j = 0;
	var _g11 = 0;
	var _g2 = _this.size32;
	while(_g11 < _g2) {
		var i2 = _g11++;
		data8[j] = _this.data[i2] >>> 16 & 255;
		data8[j + 1] = _this.data[i2] >>> 8 & 255;
		data8[j + 2] = _this.data[i2] & 255;
		data8[j + 3] = _this.data[i2] >>> 24;
		j += 4;
	}
	var idata = new ImageData(_this.width,_this.height);
	idata.data.set(data8);
	_this.c2d.putImageData(idata,0,0,0,0,_this.width,_this.height);
	_this.changed = false;
	var dither = sk_thenet_bmp_OrderedDither.BAYER_4;
	var canvas1 = window.document.createElement("canvas");
	canvas1.width = 64;
	canvas1.height = 64;
	var bmp1 = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas1);
	var width1 = bmp1.width;
	var height1 = bmp1.height;
	if(0 >>> 24 != 255) {
		bmp1.c2d.clearRect(0,0,width1,height1);
	}
	bmp1.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
	bmp1.c2d.fillRect(0,0,width1,height1);
	bmp1.changed = true;
	this.logoAppear = bmp1;
	var _this1 = this.logoAppear;
	var _g3 = [];
	var _g12 = 0;
	while(_g12 < 64) {
		var y1 = _g12++;
		var _g21 = 0;
		while(_g21 < 64) {
			var x1 = _g21++;
			var dx = x1 - 48;
			var dy = y1 + 10;
			var d = Math.sqrt(dx * dx + dy * dy);
			var a = Math.atan2(dy,dx);
			var v = (64 - (x1 >> 1) + y1) * 2;
			v += Math.floor(Math.sin(d / 4) * Math.sin(a * 5) * 30);
			v += dither[x1 % 4 + y1 % 4 * 4] * 3;
			v = -(v < 0 ? 0 : v > 255 ? 255 : v);
			var this2 = v << 24;
			_g3.push(this2);
		}
	}
	_this1.data = _g3.slice(0);
	var data81 = new Uint8ClampedArray(_this1.size8);
	var j1 = 0;
	var _g13 = 0;
	var _g4 = _this1.size32;
	while(_g13 < _g4) {
		var i3 = _g13++;
		data81[j1] = _this1.data[i3] >>> 16 & 255;
		data81[j1 + 1] = _this1.data[i3] >>> 8 & 255;
		data81[j1 + 2] = _this1.data[i3] & 255;
		data81[j1 + 3] = _this1.data[i3] >>> 24;
		j1 += 4;
	}
	var idata1 = new ImageData(_this1.width,_this1.height);
	idata1.data.set(data81);
	_this1.c2d.putImageData(idata1,0,0,0,0,_this1.width,_this1.height);
	_this1.changed = false;
	var load8 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,2,2,2,1,2,2,2,1,2,2,1,0,2,1,0,0,2,1,2,1,2,1,2,1,2,1,2,1,2,1,0,0,2,1,2,1,2,2,2,1,2,1,2,1,2,1,0,0,2,1,2,1,2,1,2,1,2,1,2,1,2,1,0,0,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,1,2,2,2,1,2,1,2,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].slice(0);
	var _g14 = [];
	var _g22 = 0;
	while(_g22 < 3) {
		var i4 = _g22++;
		var canvas2 = window.document.createElement("canvas");
		canvas2.width = 64;
		canvas2.height = 64;
		var bmp2 = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas2);
		var width2 = bmp2.width;
		var height2 = bmp2.height;
		if(0 >>> 24 != 255) {
			bmp2.c2d.clearRect(0,0,width2,height2);
		}
		bmp2.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp2.c2d.fillRect(0,0,width2,height2);
		bmp2.changed = true;
		var l = bmp2;
		var _g31 = [];
		var _g41 = 0;
		while(_g41 < 64) {
			var y2 = _g41++;
			var _g5 = 0;
			while(_g5 < 64) {
				var x2 = _g5++;
				var colour;
				var _g6 = load8[(x2 >> 2) + (y2 >> 2 << 4)];
				switch(_g6) {
				case 1:
					if(i4 == 0) {
						colour = 0;
					} else if(i4 == 1) {
						colour = this.pal[5];
					} else {
						colour = this.pal[6];
					}
					break;
				case 2:
					if(i4 == 0) {
						colour = this.pal[5];
					} else {
						colour = this.pal[4];
					}
					break;
				default:
					colour = 0;
				}
				var this3 = colour;
				_g31.push(this3);
			}
		}
		l.data = _g31.slice(0);
		var data82 = new Uint8ClampedArray(l.size8);
		var j2 = 0;
		var _g15 = 0;
		var _g7 = l.size32;
		while(_g15 < _g7) {
			var i5 = _g15++;
			data82[j2] = l.data[i5] >>> 16 & 255;
			data82[j2 + 1] = l.data[i5] >>> 8 & 255;
			data82[j2 + 2] = l.data[i5] & 255;
			data82[j2 + 3] = l.data[i5] >>> 24;
			j2 += 4;
		}
		var idata2 = new ImageData(l.width,l.height);
		idata2.data.set(data82);
		l.c2d.putImageData(idata2,0,0,0,0,l.width,l.height);
		l.changed = false;
		_g14.push(l);
	}
	this.load = _g14.slice(0);
	this.blipBloop = new sk_thenet_plat_js_common_audio_Output(2,8192);
	this.blipBloop.sample = function(offset,buffer) {
		var _g23 = 0;
		while(_g23 < 8192) {
			var i6 = _g23++;
			var v1 = (offset + i6 < 4000 ? Math.sin((i6 + offset) / 30) : offset + i6 < 12000 ? (Math.sin((i6 + offset) / 20) + Math.sin((i6 + offset) / Math.sin(10 - (offset + i6) / 3000) / 200) * .4 + Math.sin((i6 + offset) / 5) * .1) * (1 - (offset + i6 - 4000) / 9000) : 0) * .2;
			buffer[i6 << 1] = v1;
			buffer[(i6 << 1) + 1] = -v1;
		}
	};
};
sk_thenet_app_TNPreloader.__name__ = true;
sk_thenet_app_TNPreloader.__super__ = sk_thenet_app_Preloader;
sk_thenet_app_TNPreloader.prototype = $extend(sk_thenet_app_Preloader.prototype,{
	to: function() {
		var _this = this.app.bitmap;
		var width = _this.width;
		var height = _this.height;
		if(-13421773 >>> 24 != 255) {
			_this.c2d.clearRect(0,0,width,height);
		}
		_this.c2d.fillStyle = "rgba(" + (-13421773 >>> 16 & 255) + ", " + (-13421773 >>> 8 & 255) + ", " + (-13421773 & 255) + ", " + (-13421773 >>> 24) / 255 + ")";
		_this.c2d.fillRect(0,0,width,height);
		_this.changed = true;
	}
	,tick: function() {
		var _gthis = this;
		var rectX = (this.app.bitmap.width >> 1) - 32;
		var rectY = (this.app.bitmap.height >> 1) - 32;
		var _g = this.phase;
		var tmp;
		switch(_g[1]) {
		case 0:
			if(_g[2] == 0) {
				var next = _g[3];
				tmp = next;
			} else {
				var next1 = _g[3];
				var num = _g[2];
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Waiting(num - 1,next1);
			}
			break;
		case 1:
			if(_g[2] == 60) {
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Load(0);
			} else {
				var shown = _g[2];
				var pos = [(shown - 7) / 18,shown / 22,(shown - 13) / 18,(shown - 6) / 22,(shown - 30) / 18,(shown - 23) / 22,(shown - 36) / 18,(shown - 29) / 22].map(function(x) {
					return Math.floor(_gthis.rectTiming(x < 0 ? 0 : x > 1 ? 1 : x) * 63 + .5);
				});
				if(pos[0] != pos[1]) {
					var this1 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX + pos[0],rectY + 64 - 1),new sk_thenet_geom_Point2DI(rectX + pos[1],rectY + 64 - 1),false);
					var target = this.app.bitmap;
					var points = 0;
					var _g1 = this1;
					while(_g1.continueFunc()) {
						var p = _g1.streamFunc();
						if(p.x < 0 || p.x >= target.width || p.y < 0 || p.y >= target.height) {
							break;
						}
						var x1 = p.x;
						var y = p.y;
						if(-6710887 >>> 24 != 255) {
							target.c2d.clearRect(x1,y,1,1);
						}
						target.c2d.fillStyle = "rgba(" + (-6710887 >>> 16 & 255) + ", " + (-6710887 >>> 8 & 255) + ", " + (-6710887 & 255) + ", " + (-6710887 >>> 24) / 255 + ")";
						target.c2d.fillRect(x1,y,1,1);
						target.changed = true;
						target.changed = true;
						++points;
					}
				}
				var this2 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX,rectY + 64 - 1),new sk_thenet_geom_Point2DI(rectX + pos[0],rectY + 64 - 1),false);
				var target1 = this.app.bitmap;
				var points1 = 0;
				var _g2 = this2;
				while(_g2.continueFunc()) {
					var p1 = _g2.streamFunc();
					if(p1.x < 0 || p1.x >= target1.width || p1.y < 0 || p1.y >= target1.height) {
						break;
					}
					var x2 = p1.x;
					var y1 = p1.y;
					if(-10066330 >>> 24 != 255) {
						target1.c2d.clearRect(x2,y1,1,1);
					}
					target1.c2d.fillStyle = "rgba(" + (-10066330 >>> 16 & 255) + ", " + (-10066330 >>> 8 & 255) + ", " + (-10066330 & 255) + ", " + (-10066330 >>> 24) / 255 + ")";
					target1.c2d.fillRect(x2,y1,1,1);
					target1.changed = true;
					target1.changed = true;
					++points1;
				}
				if(pos[2] != pos[3]) {
					var this3 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX,rectY + 64 - 1 - pos[2]),new sk_thenet_geom_Point2DI(rectX,rectY + 64 - 1 - pos[3]),false);
					var target2 = this.app.bitmap;
					var points2 = 0;
					var _g3 = this3;
					while(_g3.continueFunc()) {
						var p2 = _g3.streamFunc();
						if(p2.x < 0 || p2.x >= target2.width || p2.y < 0 || p2.y >= target2.height) {
							break;
						}
						var x3 = p2.x;
						var y2 = p2.y;
						if(-6710887 >>> 24 != 255) {
							target2.c2d.clearRect(x3,y2,1,1);
						}
						target2.c2d.fillStyle = "rgba(" + (-6710887 >>> 16 & 255) + ", " + (-6710887 >>> 8 & 255) + ", " + (-6710887 & 255) + ", " + (-6710887 >>> 24) / 255 + ")";
						target2.c2d.fillRect(x3,y2,1,1);
						target2.changed = true;
						target2.changed = true;
						++points2;
					}
				}
				var this4 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX,rectY + 64 - 1),new sk_thenet_geom_Point2DI(rectX,rectY + 64 - 1 - pos[2]),false);
				var target3 = this.app.bitmap;
				var points3 = 0;
				var _g4 = this4;
				while(_g4.continueFunc()) {
					var p3 = _g4.streamFunc();
					if(p3.x < 0 || p3.x >= target3.width || p3.y < 0 || p3.y >= target3.height) {
						break;
					}
					var x4 = p3.x;
					var y3 = p3.y;
					if(-10066330 >>> 24 != 255) {
						target3.c2d.clearRect(x4,y3,1,1);
					}
					target3.c2d.fillStyle = "rgba(" + (-10066330 >>> 16 & 255) + ", " + (-10066330 >>> 8 & 255) + ", " + (-10066330 & 255) + ", " + (-10066330 >>> 24) / 255 + ")";
					target3.c2d.fillRect(x4,y3,1,1);
					target3.changed = true;
					target3.changed = true;
					++points3;
				}
				if(pos[4] != pos[5]) {
					var this5 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX + pos[4],rectY),new sk_thenet_geom_Point2DI(rectX + pos[5],rectY),false);
					var target4 = this.app.bitmap;
					var points4 = 0;
					var _g5 = this5;
					while(_g5.continueFunc()) {
						var p4 = _g5.streamFunc();
						if(p4.x < 0 || p4.x >= target4.width || p4.y < 0 || p4.y >= target4.height) {
							break;
						}
						var x5 = p4.x;
						var y4 = p4.y;
						if(-6710887 >>> 24 != 255) {
							target4.c2d.clearRect(x5,y4,1,1);
						}
						target4.c2d.fillStyle = "rgba(" + (-6710887 >>> 16 & 255) + ", " + (-6710887 >>> 8 & 255) + ", " + (-6710887 & 255) + ", " + (-6710887 >>> 24) / 255 + ")";
						target4.c2d.fillRect(x5,y4,1,1);
						target4.changed = true;
						target4.changed = true;
						++points4;
					}
				}
				if(pos[5] != 0) {
					var this6 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX + pos[4],rectY),new sk_thenet_geom_Point2DI(rectX,rectY),false);
					var target5 = this.app.bitmap;
					var points5 = 0;
					var _g6 = this6;
					while(_g6.continueFunc()) {
						var p5 = _g6.streamFunc();
						if(p5.x < 0 || p5.x >= target5.width || p5.y < 0 || p5.y >= target5.height) {
							break;
						}
						var x6 = p5.x;
						var y5 = p5.y;
						if(-10066330 >>> 24 != 255) {
							target5.c2d.clearRect(x6,y5,1,1);
						}
						target5.c2d.fillStyle = "rgba(" + (-10066330 >>> 16 & 255) + ", " + (-10066330 >>> 8 & 255) + ", " + (-10066330 & 255) + ", " + (-10066330 >>> 24) / 255 + ")";
						target5.c2d.fillRect(x6,y5,1,1);
						target5.changed = true;
						target5.changed = true;
						++points5;
					}
				}
				if(pos[6] != pos[7]) {
					var this7 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX + 64 - 1,rectY + 64 - 1 - pos[6]),new sk_thenet_geom_Point2DI(rectX + 64 - 1,rectY + 64 - 1 - pos[7]),false);
					var target6 = this.app.bitmap;
					var points6 = 0;
					var _g7 = this7;
					while(_g7.continueFunc()) {
						var p6 = _g7.streamFunc();
						if(p6.x < 0 || p6.x >= target6.width || p6.y < 0 || p6.y >= target6.height) {
							break;
						}
						var x7 = p6.x;
						var y6 = p6.y;
						if(-6710887 >>> 24 != 255) {
							target6.c2d.clearRect(x7,y6,1,1);
						}
						target6.c2d.fillStyle = "rgba(" + (-6710887 >>> 16 & 255) + ", " + (-6710887 >>> 8 & 255) + ", " + (-6710887 & 255) + ", " + (-6710887 >>> 24) / 255 + ")";
						target6.c2d.fillRect(x7,y6,1,1);
						target6.changed = true;
						target6.changed = true;
						++points6;
					}
				}
				if(pos[7] != 0) {
					var this8 = new sk_thenet_stream_bmp_Bresenham(new sk_thenet_geom_Point2DI(rectX + 64 - 1,rectY + 64 - 1 - pos[6]),new sk_thenet_geom_Point2DI(rectX + 64 - 1,rectY + 64 - 1),false);
					var target7 = this.app.bitmap;
					var points7 = 0;
					var _g8 = this8;
					while(_g8.continueFunc()) {
						var p7 = _g8.streamFunc();
						if(p7.x < 0 || p7.x >= target7.width || p7.y < 0 || p7.y >= target7.height) {
							break;
						}
						var x8 = p7.x;
						var y7 = p7.y;
						if(-10066330 >>> 24 != 255) {
							target7.c2d.clearRect(x8,y7,1,1);
						}
						target7.c2d.fillStyle = "rgba(" + (-10066330 >>> 16 & 255) + ", " + (-10066330 >>> 8 & 255) + ", " + (-10066330 & 255) + ", " + (-10066330 >>> 24) / 255 + ")";
						target7.c2d.fillRect(x8,y7,1,1);
						target7.changed = true;
						target7.changed = true;
						++points7;
					}
				}
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Rect(shown + 1);
			}
			break;
		case 2:
			if(_g[2] == 12) {
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Logo(0);
			} else {
				var shown1 = _g[2];
				var _this = this.app.bitmap;
				var src = this.load[shown1 >> 2];
				_this.c2d.drawImage(src["native"],0,0,src.width,src.height,rectX,rectY,src.width,src.height);
				_this.changed = true;
				if(_this.changed) {
					var data8 = _this.c2d.getImageData(0,0,_this.width,_this.height).data;
					var j = 0;
					var _g11 = 0;
					var _g9 = _this.size32;
					while(_g11 < _g9) {
						var i = _g11++;
						var this9 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
						_this.data[i] = this9;
						j += 4;
					}
					_this.changed = false;
				}
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Load(shown1 + 1);
			}
			break;
		case 3:
			var shown2 = _g[2];
			if(shown2 > 255) {
				var _this1 = this.app.bitmap;
				var src1 = this.logo;
				_this1.c2d.drawImage(src1["native"],0,0,src1.width,src1.height,rectX,rectY,src1.width,src1.height);
				_this1.changed = true;
				if(_this1.changed) {
					var data81 = _this1.c2d.getImageData(0,0,_this1.width,_this1.height).data;
					var j1 = 0;
					var _g12 = 0;
					var _g10 = _this1.size32;
					while(_g12 < _g10) {
						var i1 = _g12++;
						var this10 = data81[j1 + 3] << 24 | data81[j1] << 16 | data81[j1 + 1] << 8 | data81[j1 + 2];
						_this1.data[i1] = this10;
						j1 += 4;
					}
					_this1.changed = false;
				}
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Waiting(10,sk_thenet_app__$TNPreloader_TNPhase.LogoBlip(0));
			} else {
				var shown3 = _g[2];
				var this11 = this.logoAppear;
				var this12 = new sk_thenet_bmp_manip_Cut(0,0,64,64).extract(this11);
				var this13 = this12;
				new sk_thenet_bmp_manip_Threshold(255 - shown3 - 10).manipulate(this13);
				var this14 = this13;
				var mask1 = this14;
				var canvas = window.document.createElement("canvas");
				canvas.width = 64;
				canvas.height = 64;
				var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
				var width = bmp.width;
				var height = bmp.height;
				if(-10066330 >>> 24 != 255) {
					bmp.c2d.clearRect(0,0,width,height);
				}
				bmp.c2d.fillStyle = "rgba(" + (-10066330 >>> 16 & 255) + ", " + (-10066330 >>> 8 & 255) + ", " + (-10066330 & 255) + ", " + (-10066330 >>> 24) / 255 + ")";
				bmp.c2d.fillRect(0,0,width,height);
				bmp.changed = true;
				var this15 = bmp;
				var this16 = this15;
				new sk_thenet_bmp_manip_AlphaMask(mask1).manipulate(this16);
				var this17 = this16;
				var grayMasked = this17;
				var _this2 = this.app.bitmap;
				_this2.c2d.drawImage(grayMasked["native"],0,0,grayMasked.width,grayMasked.height,rectX,rectY,grayMasked.width,grayMasked.height);
				_this2.changed = true;
				if(_this2.changed) {
					var data82 = _this2.c2d.getImageData(0,0,_this2.width,_this2.height).data;
					var j2 = 0;
					var _g13 = 0;
					var _g14 = _this2.size32;
					while(_g13 < _g14) {
						var i2 = _g13++;
						var this18 = data82[j2 + 3] << 24 | data82[j2] << 16 | data82[j2 + 1] << 8 | data82[j2 + 2];
						_this2.data[i2] = this18;
						j2 += 4;
					}
					_this2.changed = false;
				}
				var this19 = this.logoAppear;
				var this20 = new sk_thenet_bmp_manip_Cut(0,0,64,64).extract(this19);
				var this21 = this20;
				new sk_thenet_bmp_manip_Threshold(255 - shown3).manipulate(this21);
				var this22 = this21;
				var mask2 = this22;
				var this23 = this.logo;
				var this24 = new sk_thenet_bmp_manip_Cut(0,0,64,64).extract(this23);
				var logoMasked = this24;
				new sk_thenet_bmp_manip_AlphaMask(mask2).manipulate(logoMasked);
				var this25 = logoMasked;
				var _this3 = this.app.bitmap;
				_this3.c2d.drawImage(logoMasked["native"],0,0,logoMasked.width,logoMasked.height,rectX,rectY,logoMasked.width,logoMasked.height);
				_this3.changed = true;
				if(_this3.changed) {
					var data83 = _this3.c2d.getImageData(0,0,_this3.width,_this3.height).data;
					var j3 = 0;
					var _g15 = 0;
					var _g16 = _this3.size32;
					while(_g15 < _g16) {
						var i3 = _g15++;
						var this26 = data83[j3 + 3] << 24 | data83[j3] << 16 | data83[j3 + 1] << 8 | data83[j3 + 2];
						_this3.data[i3] = this26;
						j3 += 4;
					}
					_this3.changed = false;
				}
				if(this.loaded > shown3) {
					var x9 = shown3 + 4;
					var y8 = this.loaded;
					tmp = sk_thenet_app__$TNPreloader_TNPhase.Logo(x9 < y8 ? x9 : y8);
				} else {
					tmp = sk_thenet_app__$TNPreloader_TNPhase.Logo(shown3);
				}
			}
			break;
		case 4:
			if(_g[2] == 6) {
				tmp = sk_thenet_app__$TNPreloader_TNPhase.Waiting(120,sk_thenet_app__$TNPreloader_TNPhase.Ready);
			} else {
				var shown4 = _g[2];
				if(shown4 == 0) {
					this.blipBloop.play();
				}
				var _this4 = this.app.bitmap;
				var x10 = rectX + 16;
				var y9 = rectY + 16;
				var colour = this.pal[0];
				if(colour >>> 24 != 255) {
					_this4.c2d.clearRect(x10,y9,24,4);
				}
				_this4.c2d.fillStyle = "rgba(" + (colour >>> 16 & 255) + ", " + (colour >>> 8 & 255) + ", " + (colour & 255) + ", " + (colour >>> 24) / 255 + ")";
				_this4.c2d.fillRect(x10,y9,24,4);
				_this4.changed = true;
				var _this5 = this.app.bitmap;
				var x11 = rectX + 16 + shown4 * 4;
				var y10 = rectY + 16;
				var colour1 = this.pal[1];
				if(colour1 >>> 24 != 255) {
					_this5.c2d.clearRect(x11,y10,4,4);
				}
				_this5.c2d.fillStyle = "rgba(" + (colour1 >>> 16 & 255) + ", " + (colour1 >>> 8 & 255) + ", " + (colour1 & 255) + ", " + (colour1 >>> 24) / 255 + ")";
				_this5.c2d.fillRect(x11,y10,4,4);
				_this5.changed = true;
				tmp = sk_thenet_app__$TNPreloader_TNPhase.LogoBlip(shown4 + 1);
			}
			break;
		case 5:
			this.blipBloop.stop();
			this.app.applyState(this.app.getStateById(this.nextState));
			tmp = sk_thenet_app__$TNPreloader_TNPhase.Ready;
			break;
		}
		this.phase = tmp;
	}
	,mouseClick: function(_,_1) {
		this.phase = sk_thenet_app__$TNPreloader_TNPhase.Rect(0);
	}
	,progress: function(assets) {
		var total = 0;
		var all = true;
		var _g = 0;
		while(_g < assets.length) {
			var a = assets[_g];
			++_g;
			if(a.type != sk_thenet_app_AssetType.Bitmap && a.type != sk_thenet_app_AssetType.Sound) {
				continue;
			}
			var _g1 = a.status;
			switch(_g1[1]) {
			case 2:
				var p = _g1[2];
				total += p / assets.length;
				all = false;
				break;
			case 3:
				total += 1 / assets.length;
				break;
			default:
				all = false;
			}
		}
		if(all) {
			this.loaded = 256;
			if(this.fast) {
				this.app.applyState(this.app.getStateById(this.nextState));
			}
		} else {
			this.loaded = Math.floor(total * 255);
		}
	}
	,__class__: sk_thenet_app_TNPreloader
});
var sk_thenet_app__$TNPreloader_TNPhase = { __ename__ : true, __constructs__ : ["Waiting","Rect","Load","Logo","LogoBlip","Ready"] };
sk_thenet_app__$TNPreloader_TNPhase.Waiting = function(num,next) { var $x = ["Waiting",0,num,next]; $x.__enum__ = sk_thenet_app__$TNPreloader_TNPhase; $x.toString = $estr; return $x; };
sk_thenet_app__$TNPreloader_TNPhase.Rect = function(shown) { var $x = ["Rect",1,shown]; $x.__enum__ = sk_thenet_app__$TNPreloader_TNPhase; $x.toString = $estr; return $x; };
sk_thenet_app__$TNPreloader_TNPhase.Load = function(shown) { var $x = ["Load",2,shown]; $x.__enum__ = sk_thenet_app__$TNPreloader_TNPhase; $x.toString = $estr; return $x; };
sk_thenet_app__$TNPreloader_TNPhase.Logo = function(shown) { var $x = ["Logo",3,shown]; $x.__enum__ = sk_thenet_app__$TNPreloader_TNPhase; $x.toString = $estr; return $x; };
sk_thenet_app__$TNPreloader_TNPhase.LogoBlip = function(shown) { var $x = ["LogoBlip",4,shown]; $x.__enum__ = sk_thenet_app__$TNPreloader_TNPhase; $x.toString = $estr; return $x; };
sk_thenet_app__$TNPreloader_TNPhase.Ready = ["Ready",5];
sk_thenet_app__$TNPreloader_TNPhase.Ready.toString = $estr;
sk_thenet_app__$TNPreloader_TNPhase.Ready.__enum__ = sk_thenet_app__$TNPreloader_TNPhase;
var sk_thenet_app_asset_Bind = function(bindTo,func) {
	sk_thenet_app_Asset.call(this,sk_thenet_app_AssetType.Bind,"",null);
	this.bindTo = bindTo;
	this.func = func;
};
sk_thenet_app_asset_Bind.__name__ = true;
sk_thenet_app_asset_Bind.__super__ = sk_thenet_app_Asset;
sk_thenet_app_asset_Bind.prototype = $extend(sk_thenet_app_Asset.prototype,{
	__class__: sk_thenet_app_asset_Bind
});
var sk_thenet_format_Format = function() { };
sk_thenet_format_Format.__name__ = true;
var sk_thenet_format_bmp_PNG = function() {
	this.encodeColourTypes = { encL : false, encRGB : false, encI : false, encIA : false, encLA : false, encRGBA : true};
};
sk_thenet_format_bmp_PNG.__name__ = true;
sk_thenet_format_bmp_PNG.__interfaces__ = [sk_thenet_format_Format];
sk_thenet_format_bmp_PNG.prototype = {
	encode: function(obj) {
		var encL = this.encodeColourTypes.encL;
		var encRGB = this.encodeColourTypes.encRGB;
		var encI = this.encodeColourTypes.encI;
		var encIA = this.encodeColourTypes.encIA;
		var encLA = this.encodeColourTypes.encLA;
		var encRGBA = this.encodeColourTypes.encRGBA;
		var enc = (encL ? 1 : 0) + (encRGB ? 1 : 0) + (encI ? 1 : 0) + (encIA ? 1 : 0) + (encLA ? 1 : 0) + (encRGBA ? 1 : 0);
		if(enc == 0) {
			throw new js__$Boot_HaxeError("no possible colour type");
		}
		var encIDepth = 0;
		var encIColours = 0;
		var encIAColours = 0;
		var this1 = new Array(256);
		var encIPalette = this1;
		var this2 = new Array(256);
		var encIAPalette = this2;
		var encIPaletteMap = new haxe_ds_IntMap();
		var encIAPaletteMap = new haxe_ds_IntMap();
		var encIFColours = 0;
		var this3 = new Array(256);
		var encIFPalette = this3;
		var encIFPaletteMap = new haxe_ds_IntMap();
		var encLDepth = 1;
		if(obj.changed) {
			var data8 = obj.c2d.getImageData(0,0,obj.width,obj.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = obj.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this4 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				obj.data[i] = this4;
				j += 4;
			}
			obj.changed = false;
		}
		var vec = obj.data;
		if(enc > 1 || encI || encIA) {
			var _g11 = 0;
			var _g2 = vec.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var a = vec[i1] >>> 24;
				var r = vec[i1] >>> 16 & 255;
				var g = vec[i1] >>> 8 & 255;
				var b = vec[i1] & 255;
				if(a != 255) {
					if(encL) {
						encL = false;
						--enc;
					}
					if(encI) {
						encI = false;
						--enc;
					}
					if(encRGB) {
						encRGB = false;
						--enc;
					}
					encLDepth = 8;
				}
				if(encL || encLA) {
					if(r != g || r != b) {
						if(encL) {
							encL = false;
							--enc;
						}
						if(encLA) {
							encLA = false;
							--enc;
						}
					} else if(encLDepth < 8) {
						var y = sk_thenet_format_bmp_PNG.encodeLMinDepth[r];
						if(encLDepth > y) {
							encLDepth = encLDepth;
						} else {
							encLDepth = y;
						}
					}
				}
				if(encI || encIA) {
					if(!encIPaletteMap.h.hasOwnProperty(vec[i1])) {
						if(encIFColours >= 256) {
							if(encI) {
								encI = false;
								--enc;
							}
							if(encIA) {
								encIA = false;
								--enc;
							}
						} else if(vec[i1] >>> 24 != 255) {
							encIAPalette[encIAColours] = vec[i1];
							encIAPaletteMap.h[vec[i1]] = encIAColours;
							++encIAColours;
							++encIFColours;
						} else {
							encIPalette[encIColours] = vec[i1];
							encIPaletteMap.h[vec[i1]] = encIColours;
							++encIColours;
							++encIFColours;
						}
					}
				}
				if(enc < 2 && !encI && !encIA) {
					break;
				}
			}
		}
		var raw = null;
		var rawPos = 0;
		var colourType;
		if((encL || encLA) && encLDepth == 8) {
			var _g12 = 0;
			var _g3 = vec.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				if(i2 % obj.width == 0) {
					raw.b[rawPos++] = 0;
				}
				raw.b[rawPos++] = vec[i2] >>> 16 & 255 & 255;
				if(!encL) {
					raw.b[rawPos++] = vec[i2] >>> 24 & 255;
				}
			}
			if(!encL) {
				colourType = 4;
			} else {
				colourType = 0;
			}
		} else if(encL || encLA) {
			raw = new haxe_io_Bytes(new ArrayBuffer(obj.height * (1 + (obj.width * (!encL ? 2 : 1) * encLDepth + 7 >> 3))));
			var bsh = 8 - encLDepth;
			var bi = 0;
			var cb = 0;
			var _g13 = 0;
			var _g4 = vec.length;
			while(_g13 < _g4) {
				var i3 = _g13++;
				if(i3 % obj.width == 0) {
					if(bi != 0) {
						raw.b[rawPos++] = cb & 255;
					}
					raw.b[rawPos++] = 0;
					bi = 0;
					cb = 0;
				}
				cb |= (vec[i3] >>> 16 & 255) >> bsh << 8 - bi - encLDepth;
				bi += encLDepth;
				if(!encL) {
					cb |= vec[i3] >>> 24 >> bsh << 8 - bi - encLDepth;
					bi += encLDepth;
				}
				if(bi >= 8) {
					raw.b[rawPos++] = cb & 255;
					bi = 0;
					cb = 0;
				}
			}
			if(bi != 0) {
				raw.b[rawPos++] = cb & 255;
			}
			if(!encL) {
				colourType = 4;
			} else {
				colourType = 0;
			}
		} else if(encI || encIA) {
			var _g14 = 0;
			var _g5 = encIAColours;
			while(_g14 < _g5) {
				var i4 = _g14++;
				encIFPalette[i4] = encIAPalette[i4];
				encIFPaletteMap.h[encIFPalette[i4]] = i4;
			}
			var _g15 = 0;
			var _g6 = encIColours;
			while(_g15 < _g6) {
				var i5 = _g15++;
				encIFPalette[i5 + encIAColours] = encIPalette[i5];
				encIFPaletteMap.h[encIFPalette[i5 + encIAColours]] = i5 + encIAColours;
			}
			if(encIFColours <= 2) {
				encIDepth = 1;
			} else if(encIFColours <= 4) {
				encIDepth = 2;
			} else if(encIFColours <= 16) {
				encIDepth = 4;
			} else {
				encIDepth = 8;
			}
			raw = new haxe_io_Bytes(new ArrayBuffer(obj.height * (1 + (obj.width * encIDepth + 7 >> 3))));
			var bi1 = 0;
			var cb1 = 0;
			var _g16 = 0;
			var _g7 = vec.length;
			while(_g16 < _g7) {
				var i6 = _g16++;
				if(i6 % obj.width == 0) {
					if(bi1 != 0) {
						raw.b[rawPos++] = cb1 & 255;
					}
					raw.b[rawPos++] = 0;
					bi1 = 0;
					cb1 = 0;
				}
				cb1 |= encIFPaletteMap.h[vec[i6]] << 8 - bi1 - encIDepth;
				bi1 += encIDepth;
				if(bi1 >= 8) {
					raw.b[rawPos++] = cb1 & 255;
					bi1 = 0;
					cb1 = 0;
				}
			}
			if(bi1 != 0) {
				raw.b[rawPos++] = cb1 & 255;
			}
			colourType = 3;
		} else if(encRGB) {
			raw = new haxe_io_Bytes(new ArrayBuffer(obj.height * (1 + obj.width * 3)));
			var _g17 = 0;
			var _g8 = vec.length;
			while(_g17 < _g8) {
				var i7 = _g17++;
				if(i7 % obj.width == 0) {
					raw.b[rawPos++] = 0;
				}
				raw.b[rawPos++] = vec[i7] >>> 16 & 255 & 255;
				raw.b[rawPos++] = vec[i7] >>> 8 & 255 & 255;
				raw.b[rawPos++] = vec[i7] & 255 & 255;
			}
			colourType = 2;
		} else if(encRGBA) {
			raw = new haxe_io_Bytes(new ArrayBuffer(obj.height * (1 + (obj.width << 2))));
			var _g18 = 0;
			var _g9 = vec.length;
			while(_g18 < _g9) {
				var i8 = _g18++;
				if(i8 % obj.width == 0) {
					raw.b[rawPos++] = 0;
				}
				var this5 = vec[i8];
				var val = (this5 & 16777215) << 8 | this5 >>> 24;
				raw.b[rawPos] = val >>> 24 & 255;
				raw.b[rawPos + 1] = val >> 16 & 255 & 255;
				raw.b[rawPos + 2] = val >> 8 & 255 & 255;
				raw.b[rawPos + 3] = val & 255 & 255;
				rawPos += 4;
			}
			colourType = 6;
		} else {
			throw new js__$Boot_HaxeError("no possible colour type");
		}
		var compressed = haxe_zip_Compress.run(raw,5);
		var ret = new haxe_io_Bytes(new ArrayBuffer(33 + (colourType == 3 ? 12 + encIFColours * 3 + (!encI ? 12 + encIAColours : 0) : 0) + 12 + compressed.length + 12));
		var retPos = 0;
		ret.b[retPos] = 137;
		ret.b[retPos + 1] = 80;
		ret.b[retPos + 2] = 78;
		ret.b[retPos + 3] = 71;
		retPos += 4;
		ret.b[retPos] = 13;
		ret.b[retPos + 1] = 10;
		ret.b[retPos + 2] = 26;
		ret.b[retPos + 3] = 10;
		retPos += 4;
		ret.b[retPos] = 0;
		ret.b[retPos + 1] = 0;
		ret.b[retPos + 2] = 0;
		ret.b[retPos + 3] = 13;
		var chkPos = retPos += 4;
		ret.b[retPos] = 73;
		ret.b[retPos + 1] = 72;
		ret.b[retPos + 2] = 68;
		ret.b[retPos + 3] = 82;
		retPos += 4;
		var val1 = obj.width;
		ret.b[retPos] = val1 >>> 24 & 255;
		ret.b[retPos + 1] = val1 >> 16 & 255 & 255;
		ret.b[retPos + 2] = val1 >> 8 & 255 & 255;
		ret.b[retPos + 3] = val1 & 255 & 255;
		retPos += 4;
		var val2 = obj.height;
		ret.b[retPos] = val2 >>> 24 & 255;
		ret.b[retPos + 1] = val2 >> 16 & 255 & 255;
		ret.b[retPos + 2] = val2 >> 8 & 255 & 255;
		ret.b[retPos + 3] = val2 & 255 & 255;
		retPos += 4;
		var pos = retPos++;
		var ret1 = ret.b;
		var tmp;
		switch(colourType) {
		case 3:
			tmp = encIDepth;
			break;
		case 0:case 4:
			tmp = encLDepth;
			break;
		default:
			tmp = 8;
		}
		ret1[pos] = tmp & 255;
		ret.b[retPos++] = colourType & 255;
		ret.b[retPos++] = 0;
		ret.b[retPos++] = 0;
		ret.b[retPos++] = 0;
		var val3 = sk_thenet_crypto_hash_CRC.calculateRange(ret,chkPos,17);
		ret.b[retPos] = val3 >>> 24 & 255;
		ret.b[retPos + 1] = val3 >> 16 & 255 & 255;
		ret.b[retPos + 2] = val3 >> 8 & 255 & 255;
		ret.b[retPos + 3] = val3 & 255 & 255;
		retPos += 4;
		if(colourType == 3) {
			var val4 = encIColours * 3;
			ret.b[retPos] = val4 >>> 24 & 255;
			ret.b[retPos + 1] = val4 >> 16 & 255 & 255;
			ret.b[retPos + 2] = val4 >> 8 & 255 & 255;
			ret.b[retPos + 3] = val4 & 255 & 255;
			retPos += 4;
			chkPos = retPos;
			ret.b[retPos] = 80;
			ret.b[retPos + 1] = 76;
			ret.b[retPos + 2] = 84;
			ret.b[retPos + 3] = 69;
			retPos += 4;
			var _g19 = 0;
			var _g10 = encIFColours;
			while(_g19 < _g10) {
				var i9 = _g19++;
				ret.b[retPos++] = encIFPalette[i9] >>> 16 & 255 & 255;
				ret.b[retPos++] = encIFPalette[i9] >>> 8 & 255 & 255;
				ret.b[retPos++] = encIFPalette[i9] & 255 & 255;
			}
			var val5 = sk_thenet_crypto_hash_CRC.calculateRange(ret,chkPos,encIColours * 3 + 4);
			ret.b[retPos] = val5 >>> 24 & 255;
			ret.b[retPos + 1] = val5 >> 16 & 255 & 255;
			ret.b[retPos + 2] = val5 >> 8 & 255 & 255;
			ret.b[retPos + 3] = val5 & 255 & 255;
			retPos += 4;
			if(encIAColours != 0) {
				ret.b[retPos] = encIAColours >>> 24 & 255;
				ret.b[retPos + 1] = encIAColours >> 16 & 255 & 255;
				ret.b[retPos + 2] = encIAColours >> 8 & 255 & 255;
				ret.b[retPos + 3] = encIAColours & 255 & 255;
				retPos += 4;
				chkPos = retPos;
				ret.b[retPos] = 116;
				ret.b[retPos + 1] = 82;
				ret.b[retPos + 2] = 78;
				ret.b[retPos + 3] = 83;
				retPos += 4;
				var _g110 = 0;
				var _g20 = encIAColours;
				while(_g110 < _g20) {
					var i10 = _g110++;
					ret.b[retPos++] = encIAPalette[i10] >>> 24 & 255;
				}
				var val6 = sk_thenet_crypto_hash_CRC.calculateRange(ret,chkPos,encIAColours + 4);
				ret.b[retPos] = val6 >>> 24 & 255;
				ret.b[retPos + 1] = val6 >> 16 & 255 & 255;
				ret.b[retPos + 2] = val6 >> 8 & 255 & 255;
				ret.b[retPos + 3] = val6 & 255 & 255;
				retPos += 4;
			}
		}
		var val7 = compressed.length;
		ret.b[retPos] = val7 >>> 24 & 255;
		ret.b[retPos + 1] = val7 >> 16 & 255 & 255;
		ret.b[retPos + 2] = val7 >> 8 & 255 & 255;
		ret.b[retPos + 3] = val7 & 255 & 255;
		retPos += 4;
		chkPos = retPos;
		ret.b[retPos] = 73;
		ret.b[retPos + 1] = 68;
		ret.b[retPos + 2] = 65;
		ret.b[retPos + 3] = 84;
		retPos += 4;
		ret.blit(retPos,compressed,0,compressed.length);
		retPos += compressed.length;
		var val8 = sk_thenet_crypto_hash_CRC.calculateRange(ret,chkPos,compressed.length + 4);
		ret.b[retPos] = val8 >>> 24 & 255;
		ret.b[retPos + 1] = val8 >> 16 & 255 & 255;
		ret.b[retPos + 2] = val8 >> 8 & 255 & 255;
		ret.b[retPos + 3] = val8 & 255 & 255;
		retPos += 4;
		ret.b[retPos] = 0;
		ret.b[retPos + 1] = 0;
		ret.b[retPos + 2] = 0;
		ret.b[retPos + 3] = 0;
		retPos += 4;
		ret.b[retPos] = 73;
		ret.b[retPos + 1] = 69;
		ret.b[retPos + 2] = 78;
		ret.b[retPos + 3] = 68;
		retPos += 4;
		ret.b[retPos] = 174;
		ret.b[retPos + 1] = 66;
		ret.b[retPos + 2] = 96;
		ret.b[retPos + 3] = 130;
		retPos += 4;
		return ret;
	}
	,decode: function(data) {
		var datPos = 0;
		if((data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3]) != -1991225785) {
			throw new js__$Boot_HaxeError("incorrect header");
		}
		datPos += 4;
		if((data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3]) != 218765834) {
			throw new js__$Boot_HaxeError("incorrect header");
		}
		datPos += 4;
		var ihdrSize = data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3];
		var chkPos = datPos += 4;
		if((data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3]) != 1229472850) {
			throw new js__$Boot_HaxeError("missing IHDR chunk");
		}
		datPos += 4;
		var retWidth = data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3];
		datPos += 4;
		if(retWidth <= 0 || retWidth > 2048) {
			throw new js__$Boot_HaxeError("image width incorrect");
		}
		var retHeight = data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3];
		datPos += 4;
		if(retHeight <= 0 || retHeight > 2048) {
			throw new js__$Boot_HaxeError("image height incorrect");
		}
		var retBpp = data.b[datPos++];
		var retColour = data.b[datPos++];
		var tmp;
		switch(retColour) {
		case 0:
			if(retBpp != 1 && retBpp != 2 && retBpp != 4 && retBpp != 8) {
				tmp = retBpp != 16;
			} else {
				tmp = false;
			}
			break;
		case 3:
			if(retBpp != 1 && retBpp != 2 && retBpp != 4) {
				tmp = retBpp != 8;
			} else {
				tmp = false;
			}
			break;
		case 2:case 4:case 6:
			if(retBpp != 8) {
				tmp = retBpp != 16;
			} else {
				tmp = false;
			}
			break;
		default:
			throw new js__$Boot_HaxeError("invalid colour mode");
		}
		if(tmp) {
			throw new js__$Boot_HaxeError("invalid bit depth");
		}
		if(retColour != 6 && retColour != 2) {
			throw new js__$Boot_HaxeError("unsupported colour mode");
		}
		var pixelBytes;
		switch(retColour) {
		case 2:
			pixelBytes = 3;
			break;
		case 6:
			pixelBytes = 4;
			break;
		default:
			pixelBytes = 0;
		}
		var retCompress = data.b[datPos++];
		var retFilter = data.b[datPos++];
		var retInterlace = data.b[datPos++];
		if(sk_thenet_crypto_hash_CRC.calculateRange(data,chkPos,17) != (data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3])) {
			throw new js__$Boot_HaxeError("incorrect IHDR CRC");
		}
		datPos += 4;
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["tIMe"] != null) {
			_g.setReserved("tIMe",1);
		} else {
			_g.h["tIMe"] = 1;
		}
		if(__map_reserved["zTXt"] != null) {
			_g.setReserved("zTXt",-1);
		} else {
			_g.h["zTXt"] = -1;
		}
		if(__map_reserved["tEXt"] != null) {
			_g.setReserved("tEXt",-1);
		} else {
			_g.h["tEXt"] = -1;
		}
		if(__map_reserved["iTXt"] != null) {
			_g.setReserved("iTXt",-1);
		} else {
			_g.h["iTXt"] = -1;
		}
		if(__map_reserved["pHYs"] != null) {
			_g.setReserved("pHYs",1);
		} else {
			_g.h["pHYs"] = 1;
		}
		if(__map_reserved["sPLT"] != null) {
			_g.setReserved("sPLT",-1);
		} else {
			_g.h["sPLT"] = -1;
		}
		if(__map_reserved["iCCP"] != null) {
			_g.setReserved("iCCP",1);
		} else {
			_g.h["iCCP"] = 1;
		}
		if(__map_reserved["sRGB"] != null) {
			_g.setReserved("sRGB",1);
		} else {
			_g.h["sRGB"] = 1;
		}
		if(__map_reserved["sBIT"] != null) {
			_g.setReserved("sBIT",1);
		} else {
			_g.h["sBIT"] = 1;
		}
		if(__map_reserved["gAMA"] != null) {
			_g.setReserved("gAMA",1);
		} else {
			_g.h["gAMA"] = 1;
		}
		if(__map_reserved["cHRM"] != null) {
			_g.setReserved("cHRM",1);
		} else {
			_g.h["cHRM"] = 1;
		}
		if(__map_reserved["PLTE"] != null) {
			_g.setReserved("PLTE",1);
		} else {
			_g.h["PLTE"] = 1;
		}
		if(__map_reserved["tRNS"] != null) {
			_g.setReserved("tRNS",1);
		} else {
			_g.h["tRNS"] = 1;
		}
		if(__map_reserved["hIST"] != null) {
			_g.setReserved("hIST",1);
		} else {
			_g.h["hIST"] = 1;
		}
		if(__map_reserved["bKGD"] != null) {
			_g.setReserved("bKGD",1);
		} else {
			_g.h["bKGD"] = 1;
		}
		var chunkCountsMax = _g;
		var _g1 = new haxe_ds_StringMap();
		if(__map_reserved["tIMe"] != null) {
			_g1.setReserved("tIMe",0);
		} else {
			_g1.h["tIMe"] = 0;
		}
		if(__map_reserved["zTXt"] != null) {
			_g1.setReserved("zTXt",0);
		} else {
			_g1.h["zTXt"] = 0;
		}
		if(__map_reserved["tEXt"] != null) {
			_g1.setReserved("tEXt",0);
		} else {
			_g1.h["tEXt"] = 0;
		}
		if(__map_reserved["iTXt"] != null) {
			_g1.setReserved("iTXt",0);
		} else {
			_g1.h["iTXt"] = 0;
		}
		if(__map_reserved["pHYs"] != null) {
			_g1.setReserved("pHYs",0);
		} else {
			_g1.h["pHYs"] = 0;
		}
		if(__map_reserved["sPLT"] != null) {
			_g1.setReserved("sPLT",0);
		} else {
			_g1.h["sPLT"] = 0;
		}
		if(__map_reserved["iCCP"] != null) {
			_g1.setReserved("iCCP",0);
		} else {
			_g1.h["iCCP"] = 0;
		}
		if(__map_reserved["sRGB"] != null) {
			_g1.setReserved("sRGB",0);
		} else {
			_g1.h["sRGB"] = 0;
		}
		if(__map_reserved["sBIT"] != null) {
			_g1.setReserved("sBIT",0);
		} else {
			_g1.h["sBIT"] = 0;
		}
		if(__map_reserved["gAMA"] != null) {
			_g1.setReserved("gAMA",0);
		} else {
			_g1.h["gAMA"] = 0;
		}
		if(__map_reserved["cHRM"] != null) {
			_g1.setReserved("cHRM",0);
		} else {
			_g1.h["cHRM"] = 0;
		}
		if(__map_reserved["PLTE"] != null) {
			_g1.setReserved("PLTE",0);
		} else {
			_g1.h["PLTE"] = 0;
		}
		if(__map_reserved["tRNS"] != null) {
			_g1.setReserved("tRNS",0);
		} else {
			_g1.h["tRNS"] = 0;
		}
		if(__map_reserved["hIST"] != null) {
			_g1.setReserved("hIST",0);
		} else {
			_g1.h["hIST"] = 0;
		}
		if(__map_reserved["bKGD"] != null) {
			_g1.setReserved("bKGD",0);
		} else {
			_g1.h["bKGD"] = 0;
		}
		var chunkCounts = _g1;
		var iend = false;
		var idatFirst = false;
		var idatEnd = false;
		var idatBytesStarts = [];
		var idatBytesEnds = [];
		var retWidthBytes = retWidth * pixelBytes;
		var canvas = window.document.createElement("canvas");
		canvas.width = retWidth;
		canvas.height = retHeight;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width = bmp.width;
		var height = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width,height);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width,height);
		bmp.changed = true;
		var ret = bmp;
		while(datPos < data.length) {
			var chkSize = data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3];
			datPos += 4;
			chkPos = datPos;
			var chkType = data.getString(datPos,4);
			datPos += 4;
			if(idatFirst && !idatEnd && chkType != "IDAT") {
				idatEnd = true;
				var cdlen = 0;
				var _g3 = 0;
				var _g2 = idatBytesStarts.length;
				while(_g3 < _g2) {
					var i = _g3++;
					cdlen = cdlen + (idatBytesEnds[i] - idatBytesStarts[i]);
				}
				var compressed = new haxe_io_Bytes(new ArrayBuffer(cdlen));
				var _g31 = 0;
				var _g21 = idatBytesStarts.length;
				while(_g31 < _g21) {
					var i1 = _g31++;
					compressed.blit(0,data,idatBytesStarts[i1],idatBytesEnds[i1] - idatBytesStarts[i1]);
				}
				var udata = haxe_zip_Uncompress.run(compressed);
				var upos = 0;
				var fdata = new haxe_io_Bytes(new ArrayBuffer(udata.length - retHeight));
				var fpos = 0;
				var _g32 = 0;
				var _g22 = retHeight;
				while(_g32 < _g22) {
					var y = _g32++;
					var filter = udata.b[upos++];
					switch(filter) {
					case 0:
						fdata.blit(fpos,udata,upos,retWidthBytes);
						fpos += retWidthBytes;
						upos += retWidthBytes;
						break;
					case 1:
						var _g5 = 0;
						var _g4 = retWidthBytes;
						while(_g5 < _g4) {
							var x = _g5++;
							var a = x >= pixelBytes ? fdata.b[fpos - pixelBytes] : 0;
							var p = udata.b[upos++];
							fdata.b[fpos++] = p + a & 255 & 255;
						}
						break;
					case 2:
						var _g51 = 0;
						var _g41 = retWidthBytes;
						while(_g51 < _g41) {
							var x1 = _g51++;
							var b = y > 0 ? fdata.b[fpos - retWidthBytes] : 0;
							var p1 = udata.b[upos++];
							fdata.b[fpos++] = p1 + b & 255 & 255;
						}
						break;
					case 3:
						var _g52 = 0;
						var _g42 = retWidthBytes;
						while(_g52 < _g42) {
							var x2 = _g52++;
							var a1 = x2 >= pixelBytes ? fdata.b[fpos - pixelBytes] : 0;
							var b1 = y > 0 ? fdata.b[fpos - retWidthBytes] : 0;
							var p2 = udata.b[upos++];
							fdata.b[fpos++] = p2 + (a1 + b1 >>> 1) & 255 & 255;
						}
						break;
					case 4:
						var _g53 = 0;
						var _g43 = retWidthBytes;
						while(_g53 < _g43) {
							var x3 = _g53++;
							var a2 = x3 >= pixelBytes ? fdata.b[fpos - pixelBytes] : 0;
							var b2 = y > 0 ? fdata.b[fpos - retWidthBytes] : 0;
							var c = x3 >= pixelBytes && y > 0 ? fdata.b[fpos - pixelBytes - retWidthBytes] : 0;
							var p3 = udata.b[upos++];
							var paeth = a2 + b2 - c;
							var x4 = paeth - a2;
							var paethDa = (x4 ^ x4 >> 31) - (x4 >> 31);
							var x5 = paeth - b2;
							var paethDb = (x5 ^ x5 >> 31) - (x5 >> 31);
							var x6 = paeth - c;
							var paethDc = (x6 ^ x6 >> 31) - (x6 >> 31);
							var pos = fpos++;
							var b3 = _$UInt_UInt_$Impl_$.gte(paethDb,paethDa) && _$UInt_UInt_$Impl_$.gte(paethDc,paethDa) ? a2 : _$UInt_UInt_$Impl_$.gte(paethDc,paethDb) ? b2 : c;
							fdata.b[pos] = p3 + b3 & 255 & 255;
						}
						break;
					default:
						throw new js__$Boot_HaxeError("unsupported line filter " + filter);
					}
				}
				fpos = 0;
				var this1 = new Array(retWidth * retHeight);
				var vec = this1;
				var vi = 0;
				switch(retColour) {
				case 2:
					var _g33 = 0;
					var _g23 = retHeight;
					while(_g33 < _g23) {
						var y1 = _g33++;
						var _g54 = 0;
						var _g44 = retWidth;
						while(_g54 < _g44) {
							var x7 = _g54++;
							vec[vi++] = -16777216 | fdata.b[fpos++] << 16 | fdata.b[fpos++] << 8 | fdata.b[fpos++];
						}
					}
					break;
				case 6:
					var _g34 = 0;
					var _g24 = retHeight;
					while(_g34 < _g24) {
						var y2 = _g34++;
						var _g55 = 0;
						var _g45 = retWidth;
						while(_g55 < _g45) {
							var x8 = _g55++;
							var p4 = fdata.b[fpos] << 24 | fdata.b[fpos + 1] << 16 | fdata.b[fpos + 2] << 8 | fdata.b[fpos + 3];
							fpos += 4;
							vec[vi++] = p4 << 24 | p4 >>> 8;
						}
					}
					break;
				}
				ret.data = vec;
				var data8 = new Uint8ClampedArray(ret.size8);
				var j = 0;
				var _g11 = 0;
				var _g6 = ret.size32;
				while(_g11 < _g6) {
					var i2 = _g11++;
					data8[j] = ret.data[i2] >>> 16 & 255;
					data8[j + 1] = ret.data[i2] >>> 8 & 255;
					data8[j + 2] = ret.data[i2] & 255;
					data8[j + 3] = ret.data[i2] >>> 24;
					j += 4;
				}
				var idata = new ImageData(ret.width,ret.height);
				idata.data.set(data8);
				ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
				ret.changed = false;
			}
			switch(chkType) {
			case "IDAT":
				if(idatEnd) {
					throw new js__$Boot_HaxeError("non-consecutive IDAT chunks");
				}
				idatFirst = true;
				idatBytesStarts.push(datPos);
				idatBytesEnds.push(datPos + chkSize);
				break;
			case "IEND":
				if(chkSize != 0) {
					throw new js__$Boot_HaxeError("IEND with data");
				}
				iend = true;
				break;
			case "IHDR":
				throw new js__$Boot_HaxeError("IHDR twice");
				break;
			default:
				if(!(__map_reserved[chkType] != null ? chunkCountsMax.existsReserved(chkType) : chunkCountsMax.h.hasOwnProperty(chkType))) {
					throw new js__$Boot_HaxeError("unknown chunk type");
				}
				var value = (__map_reserved[chkType] != null ? chunkCounts.getReserved(chkType) : chunkCounts.h[chkType]) + 1;
				if(__map_reserved[chkType] != null) {
					chunkCounts.setReserved(chkType,value);
				} else {
					chunkCounts.h[chkType] = value;
				}
				if((__map_reserved[chkType] != null ? chunkCountsMax.getReserved(chkType) : chunkCountsMax.h[chkType]) != -1 && (__map_reserved[chkType] != null ? chunkCounts.getReserved(chkType) : chunkCounts.h[chkType]) > (__map_reserved[chkType] != null ? chunkCountsMax.getReserved(chkType) : chunkCountsMax.h[chkType])) {
					throw new js__$Boot_HaxeError("too many ancillary chunks");
				}
			}
			datPos += chkSize;
			if(sk_thenet_crypto_hash_CRC.calculateRange(data,chkPos,chkSize + 4) != (data.b[datPos] << 24 | data.b[datPos + 1] << 16 | data.b[datPos + 2] << 8 | data.b[datPos + 3])) {
				throw new js__$Boot_HaxeError("incorrect CRC");
			}
			datPos += 4;
			if(iend && datPos < data.length) {
				throw new js__$Boot_HaxeError("data after IEND");
			}
		}
		if(!iend) {
			throw new js__$Boot_HaxeError("no IEND");
		}
		if(!idatEnd) {
			throw new js__$Boot_HaxeError("no IDAT");
		}
		return ret;
	}
	,__class__: sk_thenet_format_bmp_PNG
};
var sk_thenet_app_asset_Bitmap = function(id,filename,initial) {
	sk_thenet_app_Asset.call(this,sk_thenet_app_AssetType.Bitmap,id,filename);
	if(initial == null) {
		var canvas = window.document.createElement("canvas");
		canvas.width = 1;
		canvas.height = 1;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width = bmp.width;
		var height = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width,height);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width,height);
		bmp.changed = true;
		this.current = bmp;
		this.status = sk_thenet_app_AssetStatus.Loading(0);
	} else {
		this.current = initial;
		this.status = sk_thenet_app_AssetStatus.Loaded;
	}
};
sk_thenet_app_asset_Bitmap.__name__ = true;
sk_thenet_app_asset_Bitmap.__super__ = sk_thenet_app_Asset;
sk_thenet_app_asset_Bitmap.prototype = $extend(sk_thenet_app_Asset.prototype,{
	update: function(data) {
		if(HxOverrides.substr(this.filename,-4,null) == ".png") {
			this.updateBitmap(sk_thenet_app_asset_Bitmap.png.decode(data));
		} else {
			throw new js__$Boot_HaxeError("unknown filetype");
		}
	}
	,updateBitmap: function(data) {
		this.current = data;
		this.status = sk_thenet_app_AssetStatus.Loaded;
		sk_thenet_app_Asset.prototype.update.call(this,null);
		this.manager.updateLoad(this.id);
	}
	,__class__: sk_thenet_app_asset_Bitmap
});
var sk_thenet_app_asset_Trigger = function(id,bindTo,func) {
	var _gthis = this;
	sk_thenet_app_asset_Bind.call(this,bindTo,function(assetManager,event) {
		func(assetManager,event);
		_gthis.status = sk_thenet_app_AssetStatus.Loaded;
		_gthis.update(null);
		return false;
	});
	this.id = id;
	this.type = sk_thenet_app_AssetType.Trigger;
};
sk_thenet_app_asset_Trigger.__name__ = true;
sk_thenet_app_asset_Trigger.__super__ = sk_thenet_app_asset_Bind;
sk_thenet_app_asset_Trigger.prototype = $extend(sk_thenet_app_asset_Bind.prototype,{
	__class__: sk_thenet_app_asset_Trigger
});
var sk_thenet_audio_IOutput = function() { };
sk_thenet_audio_IOutput.__name__ = true;
var sk_thenet_bmp_Font = function(data,offset,rects) {
	this.data = data;
	this.offset = offset;
	this.rects = rects;
};
sk_thenet_bmp_Font.__name__ = true;
sk_thenet_bmp_Font.makeMonospaced = function(data,asciiOffset,characters,characterWidth,characterHeight,charactersPerLine,offsetWidth,offsetHeight) {
	if(offsetHeight == null) {
		offsetHeight = 0;
	}
	if(offsetWidth == null) {
		offsetWidth = 0;
	}
	var this1 = new Array(characters * 6);
	var rects = this1;
	var x = 0;
	var y = 0;
	var xi = 0;
	var _g1 = 0;
	var _g = characters;
	while(_g1 < _g) {
		var i = _g1++;
		rects[i * 6] = x;
		rects[i * 6 + 1] = y;
		rects[i * 6 + 2] = characterWidth;
		rects[i * 6 + 3] = characterHeight;
		rects[i * 6 + 4] = characterWidth + offsetWidth;
		rects[i * 6 + 5] = characterHeight + offsetHeight;
		x += characterWidth;
		++xi;
		if(xi >= charactersPerLine) {
			xi = 0;
			x = 0;
			y += characterHeight;
		}
	}
	return new sk_thenet_bmp_Font(data,asciiOffset,rects);
};
sk_thenet_bmp_Font.spreadGrid = function(data,characterWidth,characterHeight,addX1,addX2,addY1,addY2) {
	var gridWidth = data.width / characterWidth | 0;
	var gridHeight = data.height / characterHeight | 0;
	var canvas = window.document.createElement("canvas");
	canvas.width = gridWidth * (characterWidth + addX1 + addX2);
	canvas.height = gridHeight * (characterHeight + addY1 + addY2);
	var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
	var width = bmp.width;
	var height = bmp.height;
	if(0 >>> 24 != 255) {
		bmp.c2d.clearRect(0,0,width,height);
	}
	bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
	bmp.c2d.fillRect(0,0,width,height);
	bmp.changed = true;
	var ret = bmp;
	var _g1 = 0;
	var _g = gridHeight;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = gridWidth;
		while(_g3 < _g2) {
			var x = _g3++;
			ret.c2d.drawImage(data["native"],x * characterWidth,y * characterHeight,characterWidth,characterHeight,x * (characterWidth + addX1 + addX2) + addX1,y * (characterHeight + addY1 + addY2) + addY1,characterWidth,characterHeight);
			ret.changed = true;
		}
	}
	return ret;
};
sk_thenet_bmp_Font.prototype = {
	render: function(target,x,y,text) {
		var cx = x;
		var cy = y;
		var _g1 = 0;
		var _g = text.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ch = text.charAt(i);
			var cc = HxOverrides.cca(text,i);
			if(ch == "\n") {
				cx = x;
				cy += this.rects[3];
			} else if(cc >= this.offset && cc < this.offset + this.rects.length) {
				cc = (cc - this.offset) * 6;
				if(cx >= 0 && cx <= target.width - 1 && (cy >= 0 && cy <= target.height - 1)) {
					var srcW = this.rects[cc + 2];
					var srcH = this.rects[cc + 3];
					target.c2d.drawImage(this.data["native"],this.rects[cc],this.rects[cc + 1],srcW,srcH,cx,cy,srcW,srcH);
					target.changed = true;
				}
				cx += this.rects[cc + 4];
			}
		}
	}
	,__class__: sk_thenet_bmp_Font
};
var sk_thenet_bmp_IBitmap = function() { };
sk_thenet_bmp_IBitmap.__name__ = true;
sk_thenet_bmp_IBitmap.prototype = {
	__class__: sk_thenet_bmp_IBitmap
};
var sk_thenet_bmp_ISurface = function() { };
sk_thenet_bmp_ISurface.__name__ = true;
var sk_thenet_bmp_Manipulator = function() { };
sk_thenet_bmp_Manipulator.__name__ = true;
sk_thenet_bmp_Manipulator.prototype = {
	extract: function(bitmap) {
		return null;
	}
	,manipulate: function(bitmap) {
	}
	,__class__: sk_thenet_bmp_Manipulator
};
var sk_thenet_bmp_OrderedDither = function() { };
sk_thenet_bmp_OrderedDither.__name__ = true;
sk_thenet_bmp_OrderedDither.generateBayer = function(size) {
	var this1 = new Array(size * size);
	var ret = this1;
	var i = 0;
	var _g1 = 0;
	var _g = size;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = size;
		while(_g3 < _g2) {
			var x = _g3++;
			var a = x ^ y;
			var ret1 = 0;
			var mask = 1;
			var _g4 = 0;
			while(_g4 < 16) {
				var i1 = _g4++;
				ret1 |= (a & mask | (x & mask) << 1) << i1;
				mask *= 2;
			}
			var a1 = ret1;
			ret[i] = ((a1 * 2050 & 139536 | a1 * 32800 & 558144) * 65793 >> 16 & 255) / (size * size) | 0;
			++i;
		}
	}
	return ret;
};
var sk_thenet_bmp_VectorManipulator = function() { };
sk_thenet_bmp_VectorManipulator.__name__ = true;
sk_thenet_bmp_VectorManipulator.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_VectorManipulator.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	manipulatePixel: function(vector,i,original) {
		return original;
	}
	,extract: function(bitmap) {
		var _gthis = this;
		var width = bitmap.width;
		var height = bitmap.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		var ret = bmp;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector[i1] = _gthis.manipulatePixel(vector,i1,vector[i1]);
		}
		ret.data = vector;
		var data81 = new Uint8ClampedArray(ret.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = ret.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = ret.data[i2] >>> 16 & 255;
			data81[j1 + 1] = ret.data[i2] >>> 8 & 255;
			data81[j1 + 2] = ret.data[i2] & 255;
			data81[j1 + 3] = ret.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(ret.width,ret.height);
		idata.data.set(data81);
		ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
		ret.changed = false;
		return ret;
	}
	,manipulate: function(bitmap) {
		var _gthis = this;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector[i1] = _gthis.manipulatePixel(vector,i1,vector[i1]);
		}
		bitmap.data = vector;
		var data81 = new Uint8ClampedArray(bitmap.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = bitmap.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = bitmap.data[i2] >>> 16 & 255;
			data81[j1 + 1] = bitmap.data[i2] >>> 8 & 255;
			data81[j1 + 2] = bitmap.data[i2] & 255;
			data81[j1 + 3] = bitmap.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data81);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_VectorManipulator
});
var sk_thenet_bmp_manip_AlphaMask = function(bitmap,ignoreEmpty) {
	if(ignoreEmpty == null) {
		ignoreEmpty = false;
	}
	this.bitmap = bitmap;
	this.ignoreEmpty = ignoreEmpty;
};
sk_thenet_bmp_manip_AlphaMask.__name__ = true;
sk_thenet_bmp_manip_AlphaMask.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_manip_AlphaMask.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	manipulate: function(bitmap) {
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vec = bitmap.data;
		var _this = this.bitmap;
		if(_this.changed) {
			var data81 = _this.c2d.getImageData(0,0,_this.width,_this.height).data;
			var j1 = 0;
			var _g11 = 0;
			var _g2 = _this.size32;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var this2 = data81[j1 + 3] << 24 | data81[j1] << 16 | data81[j1 + 1] << 8 | data81[j1 + 2];
				_this.data[i1] = this2;
				j1 += 4;
			}
			_this.changed = false;
		}
		var avec = _this.data;
		var i2 = 0;
		var _g12 = 0;
		var _g3 = bitmap.height;
		while(_g12 < _g3) {
			var y = _g12++;
			var _g31 = 0;
			var _g21 = bitmap.width;
			while(_g31 < _g21) {
				var x = _g31++;
				if(this.ignoreEmpty && (vec[i2] & -16777216) == 0) {
					++i2;
					continue;
				}
				vec[i2] = avec[i2] & -16777216 | vec[i2] & 16777215;
				++i2;
			}
		}
		bitmap.data = vec;
		var data82 = new Uint8ClampedArray(bitmap.size8);
		var j2 = 0;
		var _g13 = 0;
		var _g4 = bitmap.size32;
		while(_g13 < _g4) {
			var i3 = _g13++;
			data82[j2] = bitmap.data[i3] >>> 16 & 255;
			data82[j2 + 1] = bitmap.data[i3] >>> 8 & 255;
			data82[j2 + 2] = bitmap.data[i3] & 255;
			data82[j2 + 3] = bitmap.data[i3] >>> 24;
			j2 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data82);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_manip_AlphaMask
});
var sk_thenet_bmp_manip_Cut = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
sk_thenet_bmp_manip_Cut.__name__ = true;
sk_thenet_bmp_manip_Cut.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_manip_Cut.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	extract: function(bitmap) {
		var width = this.width;
		var height = this.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		var ret = bmp;
		ret.data = bitmap.getVectorRect(this.x,this.y,this.width,this.height);
		var data8 = new Uint8ClampedArray(ret.size8);
		var j = 0;
		var _g1 = 0;
		var _g = ret.size32;
		while(_g1 < _g) {
			var i = _g1++;
			data8[j] = ret.data[i] >>> 16 & 255;
			data8[j + 1] = ret.data[i] >>> 8 & 255;
			data8[j + 2] = ret.data[i] & 255;
			data8[j + 3] = ret.data[i] >>> 24;
			j += 4;
		}
		var idata = new ImageData(ret.width,ret.height);
		idata.data.set(data8);
		ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
		ret.changed = false;
		return ret;
	}
	,__class__: sk_thenet_bmp_manip_Cut
});
var sk_thenet_bmp_manip_Glow = function(colour) {
	this.colour = colour;
};
sk_thenet_bmp_manip_Glow.__name__ = true;
sk_thenet_bmp_manip_Glow.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_manip_Glow.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	manipulate: function(bitmap) {
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vec = bitmap.data;
		var length = vec.length;
		var this2 = new Array(length);
		var r = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(vec,0,r,0,vec.length);
		var ovec = r;
		var i1 = 0;
		var _g11 = 0;
		var _g2 = bitmap.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = bitmap.width;
			while(_g3 < _g21) {
				var x = _g3++;
				if((vec[i1] & -16777216) == 0) {
					if(x > 0 && (ovec[i1 - 1] & -16777216) != 0 || y > 0 && (ovec[i1 - bitmap.width] & -16777216) != 0 || x < bitmap.width - 1 && (ovec[i1 + 1] & -16777216) != 0 || y < bitmap.height - 1 && (ovec[i1 + bitmap.width] & -16777216) != 0) {
						vec[i1] = this.colour;
					}
				}
				++i1;
			}
		}
		bitmap.data = vec;
		var data81 = new Uint8ClampedArray(bitmap.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g4 = bitmap.size32;
		while(_g12 < _g4) {
			var i2 = _g12++;
			data81[j1] = bitmap.data[i2] >>> 16 & 255;
			data81[j1 + 1] = bitmap.data[i2] >>> 8 & 255;
			data81[j1 + 2] = bitmap.data[i2] & 255;
			data81[j1 + 3] = bitmap.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data81);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_manip_Glow
});
var sk_thenet_bmp_manip_Recolour = function(colour) {
	this.colour = colour;
};
sk_thenet_bmp_manip_Recolour.__name__ = true;
sk_thenet_bmp_manip_Recolour.__super__ = sk_thenet_bmp_VectorManipulator;
sk_thenet_bmp_manip_Recolour.prototype = $extend(sk_thenet_bmp_VectorManipulator.prototype,{
	manipulatePixel: function(vector,i,original) {
		return original & -16777216 | this.colour & 16777215;
	}
	,extract: function(bitmap) {
		var _gthis = this;
		var width = bitmap.width;
		var height = bitmap.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		var ret = bmp;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector[i1] = vector[i1] & -16777216 | _gthis.colour & 16777215;
		}
		ret.data = vector;
		var data81 = new Uint8ClampedArray(ret.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = ret.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = ret.data[i2] >>> 16 & 255;
			data81[j1 + 1] = ret.data[i2] >>> 8 & 255;
			data81[j1 + 2] = ret.data[i2] & 255;
			data81[j1 + 3] = ret.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(ret.width,ret.height);
		idata.data.set(data81);
		ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
		ret.changed = false;
		return ret;
	}
	,manipulate: function(bitmap) {
		var _gthis = this;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			vector[i1] = vector[i1] & -16777216 | _gthis.colour & 16777215;
		}
		bitmap.data = vector;
		var data81 = new Uint8ClampedArray(bitmap.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = bitmap.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = bitmap.data[i2] >>> 16 & 255;
			data81[j1 + 1] = bitmap.data[i2] >>> 8 & 255;
			data81[j1 + 2] = bitmap.data[i2] & 255;
			data81[j1 + 3] = bitmap.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data81);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_manip_Recolour
});
var sk_thenet_bmp_manip_Rotate = function(angle) {
	this.angle = angle;
};
sk_thenet_bmp_manip_Rotate.__name__ = true;
sk_thenet_bmp_manip_Rotate.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_manip_Rotate.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	extract: function(bitmap) {
		var width = bitmap.width * 2;
		var height = bitmap.height * 2;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		var ret = bmp;
		var cos = Math.cos(this.angle);
		var sin = Math.sin(this.angle);
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var ovec = bitmap.data;
		if(ret.changed) {
			var data81 = ret.c2d.getImageData(0,0,ret.width,ret.height).data;
			var j1 = 0;
			var _g11 = 0;
			var _g2 = ret.size32;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var this2 = data81[j1 + 3] << 24 | data81[j1] << 16 | data81[j1 + 1] << 8 | data81[j1 + 2];
				ret.data[i1] = this2;
				j1 += 4;
			}
			ret.changed = false;
		}
		var vec = ret.data;
		var vi = 0;
		var hw = bitmap.width / 2;
		var hh = bitmap.height / 2;
		var _g12 = 0;
		var _g3 = ret.height;
		while(_g12 < _g3) {
			var y = _g12++;
			var _g31 = 0;
			var _g21 = ret.width;
			while(_g31 < _g21) {
				var x = _g31++;
				var px = x - bitmap.width;
				var py = y - bitmap.height;
				var ox = Math.floor(px * cos + py * sin + hw);
				var oy = Math.floor(-px * sin + py * cos + hh);
				if(ox >= 0 && oy >= 0 && ox < bitmap.width && oy < bitmap.height) {
					vec[vi] = ovec[ox + oy * bitmap.width];
				}
				++vi;
			}
		}
		ret.data = vec;
		var data82 = new Uint8ClampedArray(ret.size8);
		var j2 = 0;
		var _g13 = 0;
		var _g4 = ret.size32;
		while(_g13 < _g4) {
			var i2 = _g13++;
			data82[j2] = ret.data[i2] >>> 16 & 255;
			data82[j2 + 1] = ret.data[i2] >>> 8 & 255;
			data82[j2 + 2] = ret.data[i2] & 255;
			data82[j2 + 3] = ret.data[i2] >>> 24;
			j2 += 4;
		}
		var idata = new ImageData(ret.width,ret.height);
		idata.data.set(data82);
		ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
		ret.changed = false;
		return ret;
	}
	,__class__: sk_thenet_bmp_manip_Rotate
});
var sk_thenet_bmp_manip_Shadow = function(colour,x,y) {
	this.colour = colour;
	this.offsetX = x;
	this.offsetY = y;
};
sk_thenet_bmp_manip_Shadow.__name__ = true;
sk_thenet_bmp_manip_Shadow.__super__ = sk_thenet_bmp_Manipulator;
sk_thenet_bmp_manip_Shadow.prototype = $extend(sk_thenet_bmp_Manipulator.prototype,{
	manipulate: function(bitmap) {
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vec = bitmap.data;
		var length = vec.length;
		var this2 = new Array(length);
		var r = this2;
		haxe_ds__$Vector_Vector_$Impl_$.blit(vec,0,r,0,vec.length);
		var ovec = r;
		var i1 = 0;
		var _g11 = 0;
		var _g2 = bitmap.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = bitmap.width;
			while(_g3 < _g21) {
				var x = _g3++;
				if((ovec[i1] & -16777216) == 0) {
					var tmp;
					var tmp1;
					var x1 = x - this.offsetX;
					if(x1 >= 0 && x1 <= bitmap.width - 1) {
						var x2 = y - this.offsetY;
						if(x2 >= 0) {
							tmp1 = x2 <= bitmap.height - 1;
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						tmp = (ovec[i1 - this.offsetX - this.offsetY * bitmap.width] & -16777216) != 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						vec[i1] = this.colour;
					}
				}
				++i1;
			}
		}
		bitmap.data = vec;
		var data81 = new Uint8ClampedArray(bitmap.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g4 = bitmap.size32;
		while(_g12 < _g4) {
			var i2 = _g12++;
			data81[j1] = bitmap.data[i2] >>> 16 & 255;
			data81[j1 + 1] = bitmap.data[i2] >>> 8 & 255;
			data81[j1 + 2] = bitmap.data[i2] & 255;
			data81[j1 + 3] = bitmap.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data81);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_manip_Shadow
});
var sk_thenet_bmp_manip_Threshold = function(threshold) {
	this.threshold = threshold;
};
sk_thenet_bmp_manip_Threshold.__name__ = true;
sk_thenet_bmp_manip_Threshold.__super__ = sk_thenet_bmp_VectorManipulator;
sk_thenet_bmp_manip_Threshold.prototype = $extend(sk_thenet_bmp_VectorManipulator.prototype,{
	manipulatePixel: function(vector,i,original) {
		if(original >>> 24 >= this.threshold) {
			return -16777216 | original;
		} else {
			return 0;
		}
	}
	,extract: function(bitmap) {
		var _gthis = this;
		var width = bitmap.width;
		var height = bitmap.height;
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas);
		var width1 = bmp.width;
		var height1 = bmp.height;
		if(0 >>> 24 != 255) {
			bmp.c2d.clearRect(0,0,width1,height1);
		}
		bmp.c2d.fillStyle = "rgba(" + (0 >>> 16 & 255) + ", " + (0 >>> 8 & 255) + ", " + (0 & 255) + ", " + (0 >>> 24) / 255 + ")";
		bmp.c2d.fillRect(0,0,width1,height1);
		bmp.changed = true;
		var ret = bmp;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var val = vector[i1];
			vector[i1] = val >>> 24 >= _gthis.threshold ? -16777216 | val : 0;
		}
		ret.data = vector;
		var data81 = new Uint8ClampedArray(ret.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = ret.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = ret.data[i2] >>> 16 & 255;
			data81[j1 + 1] = ret.data[i2] >>> 8 & 255;
			data81[j1 + 2] = ret.data[i2] & 255;
			data81[j1 + 3] = ret.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(ret.width,ret.height);
		idata.data.set(data81);
		ret.c2d.putImageData(idata,0,0,0,0,ret.width,ret.height);
		ret.changed = false;
		return ret;
	}
	,manipulate: function(bitmap) {
		var _gthis = this;
		if(bitmap.changed) {
			var data8 = bitmap.c2d.getImageData(0,0,bitmap.width,bitmap.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = bitmap.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				bitmap.data[i] = this1;
				j += 4;
			}
			bitmap.changed = false;
		}
		var vector = bitmap.data;
		var _g11 = 0;
		var _g2 = vector.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var val = vector[i1];
			vector[i1] = val >>> 24 >= _gthis.threshold ? -16777216 | val : 0;
		}
		bitmap.data = vector;
		var data81 = new Uint8ClampedArray(bitmap.size8);
		var j1 = 0;
		var _g12 = 0;
		var _g3 = bitmap.size32;
		while(_g12 < _g3) {
			var i2 = _g12++;
			data81[j1] = bitmap.data[i2] >>> 16 & 255;
			data81[j1 + 1] = bitmap.data[i2] >>> 8 & 255;
			data81[j1 + 2] = bitmap.data[i2] & 255;
			data81[j1 + 3] = bitmap.data[i2] >>> 24;
			j1 += 4;
		}
		var idata = new ImageData(bitmap.width,bitmap.height);
		idata.data.set(data81);
		bitmap.c2d.putImageData(idata,0,0,0,0,bitmap.width,bitmap.height);
		bitmap.changed = false;
	}
	,__class__: sk_thenet_bmp_manip_Threshold
});
var sk_thenet_crypto_hash_CRC = function() { };
sk_thenet_crypto_hash_CRC.__name__ = true;
sk_thenet_crypto_hash_CRC.calculateRange = function(data,start,len) {
	var c = -1;
	var _g1 = start;
	var _g = start + len;
	while(_g1 < _g) {
		var i = _g1++;
		c = sk_thenet_crypto_hash_CRC.crc[(c ^ data.b[i]) & 255] ^ c >>> 8;
	}
	return c ^ -1;
};
var sk_thenet_event_Event = function(source,type) {
	this.source = source;
	this.type = type;
};
sk_thenet_event_Event.__name__ = true;
sk_thenet_event_Event.prototype = {
	__class__: sk_thenet_event_Event
};
var sk_thenet_event_EData = function(source,data) {
	sk_thenet_event_Event.call(this,source,"data");
	this.data = data;
};
sk_thenet_event_EData.__name__ = true;
sk_thenet_event_EData.__super__ = sk_thenet_event_Event;
sk_thenet_event_EData.prototype = $extend(sk_thenet_event_Event.prototype,{
	__class__: sk_thenet_event_EData
});
var sk_thenet_event_EFile = function(source,name,dataFunc) {
	sk_thenet_event_Event.call(this,source,"file");
	this.name = name;
	this.dataFunc = dataFunc;
};
sk_thenet_event_EFile.__name__ = true;
sk_thenet_event_EFile.__super__ = sk_thenet_event_Event;
sk_thenet_event_EFile.prototype = $extend(sk_thenet_event_Event.prototype,{
	__class__: sk_thenet_event_EFile
});
var sk_thenet_event_EKEvent = function(source,key,type) {
	sk_thenet_event_Event.call(this,source,type);
	this.key = key;
};
sk_thenet_event_EKEvent.__name__ = true;
sk_thenet_event_EKEvent.__super__ = sk_thenet_event_Event;
sk_thenet_event_EKEvent.prototype = $extend(sk_thenet_event_Event.prototype,{
	__class__: sk_thenet_event_EKEvent
});
var sk_thenet_event_EKDown = function(source,key) {
	sk_thenet_event_EKEvent.call(this,source,key,"kdown");
};
sk_thenet_event_EKDown.__name__ = true;
sk_thenet_event_EKDown.__super__ = sk_thenet_event_EKEvent;
sk_thenet_event_EKDown.prototype = $extend(sk_thenet_event_EKEvent.prototype,{
	__class__: sk_thenet_event_EKDown
});
var sk_thenet_event_EKUp = function(source,key) {
	sk_thenet_event_EKEvent.call(this,source,key,"kup");
};
sk_thenet_event_EKUp.__name__ = true;
sk_thenet_event_EKUp.__super__ = sk_thenet_event_EKEvent;
sk_thenet_event_EKUp.prototype = $extend(sk_thenet_event_EKEvent.prototype,{
	__class__: sk_thenet_event_EKUp
});
var sk_thenet_event_EMEvent = function(source,x,y,type) {
	sk_thenet_event_Event.call(this,source,type);
	this.x = x;
	this.y = y;
};
sk_thenet_event_EMEvent.__name__ = true;
sk_thenet_event_EMEvent.__super__ = sk_thenet_event_Event;
sk_thenet_event_EMEvent.prototype = $extend(sk_thenet_event_Event.prototype,{
	__class__: sk_thenet_event_EMEvent
});
var sk_thenet_event_EMClick = function(source,x,y) {
	sk_thenet_event_EMEvent.call(this,source,x,y,"mclick");
};
sk_thenet_event_EMClick.__name__ = true;
sk_thenet_event_EMClick.__super__ = sk_thenet_event_EMEvent;
sk_thenet_event_EMClick.prototype = $extend(sk_thenet_event_EMEvent.prototype,{
	__class__: sk_thenet_event_EMClick
});
var sk_thenet_event_EMDown = function(source,x,y) {
	sk_thenet_event_EMEvent.call(this,source,x,y,"mdown");
};
sk_thenet_event_EMDown.__name__ = true;
sk_thenet_event_EMDown.__super__ = sk_thenet_event_EMEvent;
sk_thenet_event_EMDown.prototype = $extend(sk_thenet_event_EMEvent.prototype,{
	__class__: sk_thenet_event_EMDown
});
var sk_thenet_event_EMUp = function(source,x,y) {
	sk_thenet_event_EMEvent.call(this,source,x,y,"mup");
};
sk_thenet_event_EMUp.__name__ = true;
sk_thenet_event_EMUp.__super__ = sk_thenet_event_EMEvent;
sk_thenet_event_EMUp.prototype = $extend(sk_thenet_event_EMEvent.prototype,{
	__class__: sk_thenet_event_EMUp
});
var sk_thenet_event_EMMove = function(source,x,y) {
	sk_thenet_event_EMEvent.call(this,source,x,y,"mmove");
};
sk_thenet_event_EMMove.__name__ = true;
sk_thenet_event_EMMove.__super__ = sk_thenet_event_EMEvent;
sk_thenet_event_EMMove.prototype = $extend(sk_thenet_event_EMEvent.prototype,{
	__class__: sk_thenet_event_EMMove
});
var sk_thenet_event_ETick = function(source) {
	sk_thenet_event_Event.call(this,source,"tick");
};
sk_thenet_event_ETick.__name__ = true;
sk_thenet_event_ETick.__super__ = sk_thenet_event_Event;
sk_thenet_event_ETick.prototype = $extend(sk_thenet_event_Event.prototype,{
	__class__: sk_thenet_event_ETick
});
var sk_thenet_geom_Point2DI = function(x,y) {
	this.x = x;
	this.y = y;
};
sk_thenet_geom_Point2DI.__name__ = true;
sk_thenet_geom_Point2DI.prototype = {
	__class__: sk_thenet_geom_Point2DI
};
var sk_thenet_geom_Quaternion = function(a,b,c,d) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
};
sk_thenet_geom_Quaternion.__name__ = true;
sk_thenet_geom_Quaternion.axisRotation = function(axis,angle) {
	var s = Math.sin(angle / 2);
	return new sk_thenet_geom_Quaternion(Math.cos(angle / 2),s * axis.x,s * axis.y,s * axis.z);
};
sk_thenet_geom_Quaternion.prototype = {
	__class__: sk_thenet_geom_Quaternion
};
var sk_thenet_net_ws_ConsoleLink = function() {
	sk_thenet_event_Source.call(this);
	this.socket = new sk_thenet_plat_js_common_net_ws_Websocket();
	this.forward("connect",this.socket);
	this.socket.listen("data",$bind(this,this.handleData));
};
sk_thenet_net_ws_ConsoleLink.__name__ = true;
sk_thenet_net_ws_ConsoleLink.__super__ = sk_thenet_event_Source;
sk_thenet_net_ws_ConsoleLink.prototype = $extend(sk_thenet_event_Source.prototype,{
	handleData: function(event) {
		var data = event.data;
		if(data.length < 1) {
			return false;
		}
		var _g = data.b[0];
		switch(_g) {
		case 1:
			this.fireEvent(new sk_thenet_event_EData(this,data.sub(1,data.length - 1)));
			break;
		case 2:
			var nameLen = data.b[1];
			var name = data.sub(2,nameLen).toString();
			var file = data.sub(2 + nameLen,data.length - 2 - nameLen);
			this.fireEvent(new sk_thenet_event_EFile(this,name,function() {
				return file;
			}));
			break;
		}
		return true;
	}
	,connect: function(host,port) {
		this.socket.connect(host,"/",port);
	}
	,monitor: function(file) {
		var _this = this.socket;
		var data = haxe_io_Bytes.ofString("\x02" + file);
		if(!_this.connected) {
			_this.sendQueue.push(data);
		} else {
			_this.socket.send(data.toString());
		}
	}
	,sendFile: function(data) {
		var o = new haxe_io_Bytes(new ArrayBuffer(data.length + 1));
		o.b[0] = 3;
		o.blit(1,data,0,data.length);
		var _this = this.socket;
		if(!_this.connected) {
			_this.sendQueue.push(o);
		} else {
			_this.socket.send(o.toString());
		}
	}
	,__class__: sk_thenet_net_ws_ConsoleLink
});
var sk_thenet_net_ws_IWebsocket = function() { };
sk_thenet_net_ws_IWebsocket.__name__ = true;
sk_thenet_net_ws_IWebsocket.__interfaces__ = [sk_thenet_event_ISource];
var sk_thenet_plat_PlatformBase = function() { };
sk_thenet_plat_PlatformBase.__name__ = true;
var sk_thenet_plat_js_canvas_Platform = function() { };
sk_thenet_plat_js_canvas_Platform.__name__ = true;
sk_thenet_plat_js_canvas_Platform.handleFrame = function(v) {
	sk_thenet_plat_js_canvas_Platform.source.fireEvent(new sk_thenet_event_ETick(sk_thenet_plat_js_canvas_Platform.source));
	window.requestAnimationFrame(sk_thenet_plat_js_canvas_Platform.handleFrame);
};
sk_thenet_plat_js_canvas_Platform.handleKeyDown = function(e) {
	var val = sk_thenet_plat_js_canvas_Platform.keyboard.handleKey(sk_thenet_plat_js_canvas_Platform.source,e,true);
	if(val != null) {
		sk_thenet_plat_js_canvas_Platform.source.fireEvent(val);
	}
};
sk_thenet_plat_js_canvas_Platform.handleKeyUp = function(e) {
	var val = sk_thenet_plat_js_canvas_Platform.keyboard.handleKey(sk_thenet_plat_js_canvas_Platform.source,e,false);
	if(val != null) {
		sk_thenet_plat_js_canvas_Platform.source.fireEvent(val);
	}
};
sk_thenet_plat_js_canvas_Platform.handleMouseClick = function(e) {
	sk_thenet_plat_js_canvas_Platform.source.fireEvent(sk_thenet_plat_js_canvas_Platform.mouse.handleClick(sk_thenet_plat_js_canvas_Platform.source,e,sk_thenet_plat_js_canvas_Platform.scale));
};
sk_thenet_plat_js_canvas_Platform.handleMouseDown = function(e) {
	var val = sk_thenet_plat_js_canvas_Platform.mouse.handleButton(sk_thenet_plat_js_canvas_Platform.source,e,true,sk_thenet_plat_js_canvas_Platform.scale);
	if(val != null) {
		sk_thenet_plat_js_canvas_Platform.source.fireEvent(val);
	}
};
sk_thenet_plat_js_canvas_Platform.handleMouseMove = function(e) {
	sk_thenet_plat_js_canvas_Platform.source.fireEvent(sk_thenet_plat_js_canvas_Platform.mouse.handleMove(sk_thenet_plat_js_canvas_Platform.source,e,sk_thenet_plat_js_canvas_Platform.scale));
};
sk_thenet_plat_js_canvas_Platform.handleMouseUp = function(e) {
	var val = sk_thenet_plat_js_canvas_Platform.mouse.handleButton(sk_thenet_plat_js_canvas_Platform.source,e,false,sk_thenet_plat_js_canvas_Platform.scale);
	if(val != null) {
		sk_thenet_plat_js_canvas_Platform.source.fireEvent(val);
	}
};
sk_thenet_plat_js_canvas_Platform.__super__ = sk_thenet_plat_PlatformBase;
sk_thenet_plat_js_canvas_Platform.prototype = $extend(sk_thenet_plat_PlatformBase.prototype,{
	__class__: sk_thenet_plat_js_canvas_Platform
});
var sk_thenet_plat_js_canvas_app_Embed = function() { };
sk_thenet_plat_js_canvas_app_Embed.__name__ = true;
sk_thenet_plat_js_canvas_app_Embed.getBitmap = function(id,file) {
	var ret = new sk_thenet_app_asset_Bitmap(id,file);
	ret.preload = function() {
		var img = new Image();
		img.onload = function() {
			var canvas = window.document.createElement("canvas");
			canvas.width = img.width;
			canvas.height = img.height;
			var c2d = canvas.getContext("2d",null);
			c2d.drawImage(img,0,0);
			var bmp = new sk_thenet_plat_js_canvas_bmp_Bitmap(canvas,c2d);
			ret.updateBitmap(bmp);
		};
		img.src = file;
	};
	return ret;
};
var sk_thenet_plat_js_canvas_bmp_Bitmap = function($native,c2d) {
	this["native"] = $native;
	this.width = $native.width;
	this.height = $native.height;
	if(c2d != null) {
		this.c2d = c2d;
	} else {
		this.c2d = $native.getContext("2d",null);
	}
	this.c2d.imageSmoothingEnabled = false;
	this.c2d.webkitImageSmoothingEnabled = false;
	this.c2d.msImageSmoothingEnabled = false;
	this.c2d.mozImageSmoothingEnabled = false;
	var length = this.width * this.height;
	var this1 = new Array(length);
	this.data = this1;
	this.size32 = this.width * this.height;
	this.size8 = this.size32 << 2;
	this.changed = true;
	if(this.changed) {
		var data8 = this.c2d.getImageData(0,0,this.width,this.height).data;
		var j = 0;
		var _g1 = 0;
		var _g = this.size32;
		while(_g1 < _g) {
			var i = _g1++;
			var this2 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
			this.data[i] = this2;
			j += 4;
		}
		this.changed = false;
	}
};
sk_thenet_plat_js_canvas_bmp_Bitmap.__name__ = true;
sk_thenet_plat_js_canvas_bmp_Bitmap.__interfaces__ = [sk_thenet_bmp_IBitmap];
sk_thenet_plat_js_canvas_bmp_Bitmap.prototype = {
	debug: function() {
		window.document.body.appendChild(this["native"]);
	}
	,getVectorRect: function(x,y,width,height) {
		var max = this.width;
		if(x < 0) {
			x = 0;
		} else if(x > max) {
			x = max;
		} else {
			x = x;
		}
		var max1 = this.height;
		if(y < 0) {
			y = 0;
		} else if(y > max1) {
			y = max1;
		} else {
			y = y;
		}
		var max2 = this.width - x;
		if(width < 1) {
			width = 1;
		} else if(width > max2) {
			width = max2;
		} else {
			width = width;
		}
		var max3 = this.height - y;
		if(height < 1) {
			height = 1;
		} else if(height > max3) {
			height = max3;
		} else {
			height = height;
		}
		if(this.changed) {
			var data8 = this.c2d.getImageData(0,0,this.width,this.height).data;
			var j = 0;
			var _g1 = 0;
			var _g = this.size32;
			while(_g1 < _g) {
				var i = _g1++;
				var this1 = data8[j + 3] << 24 | data8[j] << 16 | data8[j + 1] << 8 | data8[j + 2];
				this.data[i] = this1;
				j += 4;
			}
			this.changed = false;
		}
		var this2 = new Array(width * height);
		var ret = this2;
		var vi = 0;
		var di = 0;
		var _g11 = y;
		var _g2 = y + height;
		while(_g11 < _g2) {
			var vy = _g11++;
			di = x + vy * this.width;
			var _g3 = x;
			var _g21 = x + width;
			while(_g3 < _g21) {
				var vx = _g3++;
				ret[vi] = this.data[di];
				++vi;
				++di;
			}
		}
		return ret;
	}
	,__class__: sk_thenet_plat_js_canvas_bmp_Bitmap
};
var sk_thenet_plat_js_canvas_bmp_Surface = function(bitmap) {
	this.bitmap = bitmap;
};
sk_thenet_plat_js_canvas_bmp_Surface.__name__ = true;
sk_thenet_plat_js_canvas_bmp_Surface.__interfaces__ = [sk_thenet_bmp_ISurface];
sk_thenet_plat_js_canvas_bmp_Surface.prototype = {
	__class__: sk_thenet_plat_js_canvas_bmp_Surface
};
var sk_thenet_plat_js_common_app_Keyboard = function() {
	sk_thenet_app_Keyboard.call(this);
	this.lookup = new haxe_ds_StringMap();
	var _this = this.lookup;
	var value = 0;
	if(__map_reserved["ArrowLeft"] != null) {
		_this.setReserved("ArrowLeft",value);
	} else {
		_this.h["ArrowLeft"] = value;
	}
	var _this1 = this.lookup;
	var value1 = 1;
	if(__map_reserved["ArrowUp"] != null) {
		_this1.setReserved("ArrowUp",value1);
	} else {
		_this1.h["ArrowUp"] = value1;
	}
	var _this2 = this.lookup;
	var value2 = 2;
	if(__map_reserved["ArrowRight"] != null) {
		_this2.setReserved("ArrowRight",value2);
	} else {
		_this2.h["ArrowRight"] = value2;
	}
	var _this3 = this.lookup;
	var value3 = 3;
	if(__map_reserved["ArrowDown"] != null) {
		_this3.setReserved("ArrowDown",value3);
	} else {
		_this3.h["ArrowDown"] = value3;
	}
	var _this4 = this.lookup;
	var value4 = 4;
	if(__map_reserved["Space"] != null) {
		_this4.setReserved("Space",value4);
	} else {
		_this4.h["Space"] = value4;
	}
	var _this5 = this.lookup;
	var value5 = 5;
	if(__map_reserved["Digit0"] != null) {
		_this5.setReserved("Digit0",value5);
	} else {
		_this5.h["Digit0"] = value5;
	}
	var _this6 = this.lookup;
	var value6 = 6;
	if(__map_reserved["Digit1"] != null) {
		_this6.setReserved("Digit1",value6);
	} else {
		_this6.h["Digit1"] = value6;
	}
	var _this7 = this.lookup;
	var value7 = 7;
	if(__map_reserved["Digit2"] != null) {
		_this7.setReserved("Digit2",value7);
	} else {
		_this7.h["Digit2"] = value7;
	}
	var _this8 = this.lookup;
	var value8 = 8;
	if(__map_reserved["Digit3"] != null) {
		_this8.setReserved("Digit3",value8);
	} else {
		_this8.h["Digit3"] = value8;
	}
	var _this9 = this.lookup;
	var value9 = 9;
	if(__map_reserved["Digit4"] != null) {
		_this9.setReserved("Digit4",value9);
	} else {
		_this9.h["Digit4"] = value9;
	}
	var _this10 = this.lookup;
	var value10 = 10;
	if(__map_reserved["Digit5"] != null) {
		_this10.setReserved("Digit5",value10);
	} else {
		_this10.h["Digit5"] = value10;
	}
	var _this11 = this.lookup;
	var value11 = 11;
	if(__map_reserved["Digit6"] != null) {
		_this11.setReserved("Digit6",value11);
	} else {
		_this11.h["Digit6"] = value11;
	}
	var _this12 = this.lookup;
	var value12 = 12;
	if(__map_reserved["Digit7"] != null) {
		_this12.setReserved("Digit7",value12);
	} else {
		_this12.h["Digit7"] = value12;
	}
	var _this13 = this.lookup;
	var value13 = 13;
	if(__map_reserved["Digit8"] != null) {
		_this13.setReserved("Digit8",value13);
	} else {
		_this13.h["Digit8"] = value13;
	}
	var _this14 = this.lookup;
	var value14 = 14;
	if(__map_reserved["Digit9"] != null) {
		_this14.setReserved("Digit9",value14);
	} else {
		_this14.h["Digit9"] = value14;
	}
	var _this15 = this.lookup;
	var value15 = 15;
	if(__map_reserved["KeyA"] != null) {
		_this15.setReserved("KeyA",value15);
	} else {
		_this15.h["KeyA"] = value15;
	}
	var _this16 = this.lookup;
	var value16 = 16;
	if(__map_reserved["KeyB"] != null) {
		_this16.setReserved("KeyB",value16);
	} else {
		_this16.h["KeyB"] = value16;
	}
	var _this17 = this.lookup;
	var value17 = 17;
	if(__map_reserved["KeyC"] != null) {
		_this17.setReserved("KeyC",value17);
	} else {
		_this17.h["KeyC"] = value17;
	}
	var _this18 = this.lookup;
	var value18 = 18;
	if(__map_reserved["KeyD"] != null) {
		_this18.setReserved("KeyD",value18);
	} else {
		_this18.h["KeyD"] = value18;
	}
	var _this19 = this.lookup;
	var value19 = 19;
	if(__map_reserved["KeyE"] != null) {
		_this19.setReserved("KeyE",value19);
	} else {
		_this19.h["KeyE"] = value19;
	}
	var _this20 = this.lookup;
	var value20 = 20;
	if(__map_reserved["KeyF"] != null) {
		_this20.setReserved("KeyF",value20);
	} else {
		_this20.h["KeyF"] = value20;
	}
	var _this21 = this.lookup;
	var value21 = 21;
	if(__map_reserved["KeyG"] != null) {
		_this21.setReserved("KeyG",value21);
	} else {
		_this21.h["KeyG"] = value21;
	}
	var _this22 = this.lookup;
	var value22 = 22;
	if(__map_reserved["KeyH"] != null) {
		_this22.setReserved("KeyH",value22);
	} else {
		_this22.h["KeyH"] = value22;
	}
	var _this23 = this.lookup;
	var value23 = 23;
	if(__map_reserved["KeyI"] != null) {
		_this23.setReserved("KeyI",value23);
	} else {
		_this23.h["KeyI"] = value23;
	}
	var _this24 = this.lookup;
	var value24 = 24;
	if(__map_reserved["KeyJ"] != null) {
		_this24.setReserved("KeyJ",value24);
	} else {
		_this24.h["KeyJ"] = value24;
	}
	var _this25 = this.lookup;
	var value25 = 25;
	if(__map_reserved["KeyK"] != null) {
		_this25.setReserved("KeyK",value25);
	} else {
		_this25.h["KeyK"] = value25;
	}
	var _this26 = this.lookup;
	var value26 = 26;
	if(__map_reserved["KeyL"] != null) {
		_this26.setReserved("KeyL",value26);
	} else {
		_this26.h["KeyL"] = value26;
	}
	var _this27 = this.lookup;
	var value27 = 27;
	if(__map_reserved["KeyM"] != null) {
		_this27.setReserved("KeyM",value27);
	} else {
		_this27.h["KeyM"] = value27;
	}
	var _this28 = this.lookup;
	var value28 = 28;
	if(__map_reserved["KeyN"] != null) {
		_this28.setReserved("KeyN",value28);
	} else {
		_this28.h["KeyN"] = value28;
	}
	var _this29 = this.lookup;
	var value29 = 29;
	if(__map_reserved["KeyO"] != null) {
		_this29.setReserved("KeyO",value29);
	} else {
		_this29.h["KeyO"] = value29;
	}
	var _this30 = this.lookup;
	var value30 = 30;
	if(__map_reserved["KeyP"] != null) {
		_this30.setReserved("KeyP",value30);
	} else {
		_this30.h["KeyP"] = value30;
	}
	var _this31 = this.lookup;
	var value31 = 31;
	if(__map_reserved["KeyQ"] != null) {
		_this31.setReserved("KeyQ",value31);
	} else {
		_this31.h["KeyQ"] = value31;
	}
	var _this32 = this.lookup;
	var value32 = 32;
	if(__map_reserved["KeyR"] != null) {
		_this32.setReserved("KeyR",value32);
	} else {
		_this32.h["KeyR"] = value32;
	}
	var _this33 = this.lookup;
	var value33 = 33;
	if(__map_reserved["KeyS"] != null) {
		_this33.setReserved("KeyS",value33);
	} else {
		_this33.h["KeyS"] = value33;
	}
	var _this34 = this.lookup;
	var value34 = 34;
	if(__map_reserved["KeyT"] != null) {
		_this34.setReserved("KeyT",value34);
	} else {
		_this34.h["KeyT"] = value34;
	}
	var _this35 = this.lookup;
	var value35 = 35;
	if(__map_reserved["KeyU"] != null) {
		_this35.setReserved("KeyU",value35);
	} else {
		_this35.h["KeyU"] = value35;
	}
	var _this36 = this.lookup;
	var value36 = 36;
	if(__map_reserved["KeyV"] != null) {
		_this36.setReserved("KeyV",value36);
	} else {
		_this36.h["KeyV"] = value36;
	}
	var _this37 = this.lookup;
	var value37 = 37;
	if(__map_reserved["KeyW"] != null) {
		_this37.setReserved("KeyW",value37);
	} else {
		_this37.h["KeyW"] = value37;
	}
	var _this38 = this.lookup;
	var value38 = 38;
	if(__map_reserved["KeyX"] != null) {
		_this38.setReserved("KeyX",value38);
	} else {
		_this38.h["KeyX"] = value38;
	}
	var _this39 = this.lookup;
	var value39 = 39;
	if(__map_reserved["KeyY"] != null) {
		_this39.setReserved("KeyY",value39);
	} else {
		_this39.h["KeyY"] = value39;
	}
	var _this40 = this.lookup;
	var value40 = 40;
	if(__map_reserved["KeyZ"] != null) {
		_this40.setReserved("KeyZ",value40);
	} else {
		_this40.h["KeyZ"] = value40;
	}
	var _this41 = this.lookup;
	var value41 = 41;
	if(__map_reserved["Backspace"] != null) {
		_this41.setReserved("Backspace",value41);
	} else {
		_this41.h["Backspace"] = value41;
	}
	var _this42 = this.lookup;
	var value42 = 42;
	if(__map_reserved["Enter"] != null) {
		_this42.setReserved("Enter",value42);
	} else {
		_this42.h["Enter"] = value42;
	}
};
sk_thenet_plat_js_common_app_Keyboard.__name__ = true;
sk_thenet_plat_js_common_app_Keyboard.__super__ = sk_thenet_app_Keyboard;
sk_thenet_plat_js_common_app_Keyboard.prototype = $extend(sk_thenet_app_Keyboard.prototype,{
	handleKey: function(source,e,down) {
		var code = e.code;
		var _this = this.lookup;
		if(!(__map_reserved[code] != null ? _this.existsReserved(code) : _this.h.hasOwnProperty(code))) {
			return null;
		}
		var _this1 = this.lookup;
		var key = __map_reserved[code] != null ? _this1.getReserved(code) : _this1.h[code];
		if(this.keysHeld[key] == down) {
			return null;
		}
		this.keysHeld[key] = down;
		if(down) {
			return new sk_thenet_event_EKDown(source,key);
		}
		return new sk_thenet_event_EKUp(source,key);
	}
	,__class__: sk_thenet_plat_js_common_app_Keyboard
});
var sk_thenet_plat_js_common_app_Mouse = function() {
	sk_thenet_app_Mouse.call(this);
};
sk_thenet_plat_js_common_app_Mouse.__name__ = true;
sk_thenet_plat_js_common_app_Mouse.__super__ = sk_thenet_app_Mouse;
sk_thenet_plat_js_common_app_Mouse.prototype = $extend(sk_thenet_app_Mouse.prototype,{
	handleClick: function(source,e,scale) {
		this.x = Math.floor(e.offsetX) >> scale;
		this.y = Math.floor(e.offsetY) >> scale;
		return new sk_thenet_event_EMClick(source,this.x,this.y);
	}
	,handleMove: function(source,e,scale) {
		this.x = Math.floor(e.offsetX) >> scale;
		this.y = Math.floor(e.offsetY) >> scale;
		return new sk_thenet_event_EMMove(source,this.x,this.y);
	}
	,handleButton: function(source,e,held,scale) {
		this.x = Math.floor(e.offsetX) >> scale;
		this.y = Math.floor(e.offsetY) >> scale;
		if(this.held == held) {
			return null;
		}
		this.held = held;
		if(held) {
			return new sk_thenet_event_EMDown(source,this.x,this.y);
		}
		return new sk_thenet_event_EMUp(source,this.x,this.y);
	}
	,__class__: sk_thenet_plat_js_common_app_Mouse
});
var sk_thenet_plat_js_common_audio_Output = function(channels,samples) {
	if(samples == null) {
		samples = 8192;
	}
	if(channels == null) {
		channels = 2;
	}
	this.playing = false;
	this.samples = samples;
	this.channels = channels;
	this.channelsSamples = samples * channels;
	var length = this.channelsSamples;
	var this1 = new Array(length);
	this.buffer = this1;
	var _g1 = 0;
	var _g = this.channelsSamples;
	while(_g1 < _g) {
		var i = _g1++;
		this.buffer[i] = 0;
	}
};
sk_thenet_plat_js_common_audio_Output.__name__ = true;
sk_thenet_plat_js_common_audio_Output.__interfaces__ = [sk_thenet_audio_IOutput];
sk_thenet_plat_js_common_audio_Output.prototype = {
	play: function() {
		if(!this.playing) {
			this.time = 0;
			this.playing = true;
			this.outputContext = new AudioContext();
			this.outputOscillator = this.outputContext.createOscillator();
			var buf = this.outputContext.createBuffer(2,this.samples,44100);
			this.outputNode = this.outputContext.createScriptProcessor(this.samples,1,2);
			this.outputNode.onaudioprocess = $bind(this,this.handleSample);
			this.outputOscillator.connect(this.outputNode);
			this.outputNode.connect(this.outputContext.destination);
			this.outputOscillator.start(0);
		}
	}
	,stop: function() {
		if(this.playing) {
			this.playing = false;
			this.outputOscillator.stop();
			this.outputOscillator.disconnect();
			this.outputNode.disconnect();
		}
	}
	,handleSample: function(event) {
		this.sample(this.time,this.buffer);
		this.time += this.samples;
		var outLeft = event.outputBuffer.getChannelData(0);
		var outRight = event.outputBuffer.getChannelData(1);
		var i = 0;
		var i2 = 0;
		while(i2 < this.channelsSamples) {
			outLeft[i] = this.buffer[i2++];
			outRight[i] = this.buffer[i2++];
			++i;
		}
	}
	,sample: function(offset,buffer) {
	}
	,__class__: sk_thenet_plat_js_common_audio_Output
};
var sk_thenet_plat_js_common_net_ws_Websocket = function() {
	this.handshake = false;
	this.connected = false;
	sk_thenet_event_Source.call(this);
	this.sendQueue = [];
};
sk_thenet_plat_js_common_net_ws_Websocket.__name__ = true;
sk_thenet_plat_js_common_net_ws_Websocket.__interfaces__ = [sk_thenet_net_ws_IWebsocket];
sk_thenet_plat_js_common_net_ws_Websocket.__super__ = sk_thenet_event_Source;
sk_thenet_plat_js_common_net_ws_Websocket.prototype = $extend(sk_thenet_event_Source.prototype,{
	connect: function(host,url,port) {
		if(host.indexOf("ws://") == -1 && host.indexOf("wss://") == -1) {
			host = "ws://" + host;
		}
		this.socket = new WebSocket(host + ":" + port + "/" + url);
		this.socket.onclose = $bind(this,this.handleClose);
		this.socket.onmessage = $bind(this,this.handleData);
		this.socket.onopen = $bind(this,this.handleConnect);
	}
	,handleClose: function(ev) {
		this.connected = false;
		this.handshake = false;
	}
	,handleConnect: function(ev) {
		this.fireEvent(new sk_thenet_event_Event(this,"connect"));
		this.connected = true;
		this.handshake = true;
		var _g = 0;
		var _g1 = this.sendQueue;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(!this.connected) {
				this.sendQueue.push(s);
			} else {
				this.socket.send(s.toString());
			}
		}
	}
	,handleData: function(ev) {
		var _gthis = this;
		if(js_Boot.__instanceof(ev.data,Blob)) {
			var fileReader = new FileReader();
			fileReader.onload = function() {
				var data = haxe_io_Bytes.ofData(fileReader.result);
				_gthis.fireEvent(new sk_thenet_event_EData(_gthis,data));
			};
			fileReader.readAsArrayBuffer(ev.data);
		} else {
			var data1 = haxe_io_Bytes.ofString(ev.data);
			this.fireEvent(new sk_thenet_event_EData(this,data1));
		}
	}
	,__class__: sk_thenet_plat_js_common_net_ws_Websocket
});
var sk_thenet_stream_bmp_Bresenham = function(from,to,ray) {
	if(ray == null) {
		ray = false;
	}
	var x = from.x;
	var y = from.y;
	var x1 = to.x - x;
	var dx = (x1 ^ x1 >> 31) - (x1 >> 31);
	var sx = x < to.x ? 1 : -1;
	var x2 = to.y - y;
	var dy = (x2 ^ x2 >> 31) - (x2 >> 31);
	var sy = y < to.y ? 1 : -1;
	var err = (dx > dy ? dx : -dy) / 2;
	var finished = false;
	sk_thenet_stream_Stream.call(this,ray ? sk_thenet_stream_Stream.always : function() {
		return !finished;
	},function() {
		var ret = new sk_thenet_geom_Point2DI(x,y);
		if(x == to.x && y == to.y) {
			finished = true;
		} else {
			var e2 = err;
			if(e2 > -dx) {
				err -= dy;
				x += sx;
			}
			if(e2 < dy) {
				err += dx;
				y += sy;
			}
		}
		return ret;
	});
};
sk_thenet_stream_bmp_Bresenham.__name__ = true;
sk_thenet_stream_bmp_Bresenham.getTopDown = function(from,to) {
	if(from.y > to.y) {
		return new sk_thenet_stream_bmp_Bresenham(to,from);
	} else if(from.y == to.y && from.x > to.x) {
		return new sk_thenet_stream_bmp_Bresenham(to,from);
	}
	return new sk_thenet_stream_bmp_Bresenham(from,to);
};
sk_thenet_stream_bmp_Bresenham.__super__ = sk_thenet_stream_Stream;
sk_thenet_stream_bmp_Bresenham.prototype = $extend(sk_thenet_stream_Stream.prototype,{
	__class__: sk_thenet_stream_bmp_Bresenham
});
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Main.WIDTH = 400;
Main.HEIGHT = 225;
Main.HWIDTH = 200;
Main.HHEIGHT = 112;
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
sk_thenet_FM.prng = sk_thenet_stream_prng__$Generator_Generator_$Impl_$._new(new sk_thenet_stream_prng_XORShift(-88652429));
sk_thenet_anim__$Timing_Timing_$Impl_$.quadInOut = function(x) {
	if(x < .5) {
		return 2 * x * x;
	} else {
		x = 2 * x - 2;
		return -.5 * x * x + 1;
	}
};
sk_thenet_app_Keyboard.KEY_CHARACTERS = " 0123456789abcdefghijklmnopqrstuvwxyz \n";
sk_thenet_format_bmp_PNG.encodeLMinDepth = [1,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1].slice(0);
sk_thenet_app_asset_Bitmap.png = new sk_thenet_format_bmp_PNG();
sk_thenet_bmp_OrderedDither.BAYER_4 = sk_thenet_bmp_OrderedDither.generateBayer(4);
sk_thenet_crypto_hash_CRC.crc = (function($this) {
	var $r;
	var c;
	var this1 = new Array(256);
	var ret = this1;
	{
		var _g = 0;
		while(_g < 256) {
			var n = _g++;
			c = n;
			var _g1 = 0;
			while(_g1 < 8) {
				var k = _g1++;
				if((c & 1) == 1) {
					c = -306674912 ^ c >>> 1;
				} else {
					c = c >>> 1;
				}
			}
			ret[n] = c;
		}
	}
	$r = ret;
	return $r;
}(this));
sk_thenet_geom_Quaternion.identity = new sk_thenet_geom_Quaternion(.5,0,0,0);
sk_thenet_plat_js_canvas_Platform.scale = 0;
sk_thenet_plat_js_canvas_Platform.source = new sk_thenet_event_Source();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
